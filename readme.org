#+TODO: VIEWONLY TODO NEXT OPEN | CLOSED WATCHEDONLY DONE

* Notes Readme Orientation

Welcome to my notes. Each document or directory in notes/  represents a video course,
blog post (or series of posts), book, tutorial, etc. for which I decided to take notes.

This readme is composed of five major headings, which manage different aspects of my
notes.

1. The TODO list is what I'm currently taking notes on.
2. The Queue is a staging area from the larger directory
3. The Directory lists all past, present and future notes.
4. App Ideas is pretty self explanatory
5. Horizons are the things I want to learn in the future,
   but can't plan into the queue or directory.

My notes are formatted as org docs, but I only use headings, tables, TODOs, and org-babel
source blocks extensively. For more information on org-mode see: http://orgmode.org/


* TODO heap(s)
** React
*** OPEN Update react-router Notes for v.4
*** OPEN Advanced React and Redux : Stephen Girder (12:00)
*** Consilidate Redux Notes
*** TODO Building React Apps w/ Idiomatic Redux : Dan Abrimov(egghead)
*** TODO Building a Full-Stack App with React and Express : Daniel Stern (3:24)
*** TODO Building Applications with React and Redux in ES6: Cory House (6:14)
** Env: Webpack / eslint / etc
*** TODO Advanced Webpack Talk : Jonathan Creamer (0:31) https://www.youtube.com/watch?v=MzVFrIAwwS8
*** eslint configs : template strings, bodil, fp,etc.
*** update starter kit with postcss-nested
*** colocate links to survive / keathly / react.js boilerplate / create-react-app
** Asynchronicity
*** TODO Modern Asynchronous JavaScript : Wes Higbee (6:34)
*** OPEN NAN WEB Playlist: https://www.youtube.com/playlist?list=PLXkhVgwfT5WUzXkV6yN7DLOx7NzoJHr3G
*** csp-js
*** redux-thunk / redux-promises / redux-saga / redux-observable
*** TODO Asynchronous Programming: The End of the Loop : Jafar Husain
*** TODO YDKJS: Async
** Testing
*** OPEN React Testing Cookbook
*** VIEWONLY Mastering React Testing with Jest : Daniel Stern (1:57)
** Clojure
*** Chapters 5, 6, 7 in Living Clojure
*** https://howistart.org/posts/clojure/1
*** Living Clojure Week 2
*** Chapter 4 in ClojureScript Unraveled
*** Anki Flash Cards for .core function signatures
** emacs
*** Elisp Talks
**** elisp in 15 minutes: https://learnxinyminutes.com/docs/elisp/
**** analyse . files


* BackBurner
** JS
*** OPEN Practical Design Patterns in JavaScript : Jonathan Mills (3:10)
** CSS
*** OPEN Learn CSS Layout: the Pendatic Way
*** OPEN CSS3 In-Depth : Estelle Weyl (6:10)
** Webpack
*** OPEN Survive JS - Webpack
*** OPEN Webpack Fundamentals : Joe Eames (2:23)
** Node
*** OPEN Intro to Node JS : Paul O'Fallon (2:48)
*** OPEN Learn & Understand Node.js : Anthony Alicea (12:00+)



* directory
** Notes
*** Books
**** JavaScript
***** OPEN JavaScript Allonge : Review and Refactor Portfolio
***** TODO Professor Frisby's Mostly Adequate Guide to Functional Programming
***** TODO YDKJS: Async
***** OPEN Survive JS - Webpack
***** Survive JS - React
***** Learning React Native
**** Clojure
***** OPEN Living Clojure
***** OPEN ClojureScript Unraveled
***** Clojure for the Brave and True
***** Web Development with Clojure
***** Etudes for ClojureScript
***** Clojure Applied
**** Scheme
***** The Little Schemer
***** HtDP [5/43]
    I. Processing Simple Forms of Data
 - [X] Students, Teachers, Computers
 - [X] Numbers, Expressions, Simple Programs
 - [X] Programs are Function Plus Variable Definitions
 - [X] Conditional Expressions and Functions
 - [X] Symbolic Information
 - [ ] Compound Data, Part 1: Structures
 - [ ] The Varieties of Data
 - [ ] Intermezzo 1: Syntax and Semantics
 II. Processing Arbitrarily Large Data
 - [ ] Compound Data, Part 2: Lists
 - [ ] More on Processing Lists
 - [ ] Natural Numbers
 - [ ] Composing Functions, Revisited Again
 - [ ] Intermezzo 2: List Abbreviations
 III. More on Processing Arbitrarily Large Data
 - [ ] More Self-referential Data Definitions
 - [ ] Mutually Referential data Definitions
 - [ ] Development through Iterative Refinement
 - [ ] Processing Two Complex Pieces of Data
 - [ ] Intermezzo 3: Local Definitions and Lexical Scope
 IV. Abstracting Designs
 - [ ] Similarities in Definitions
 - [ ] Functions as Values
 - [ ] Designing Abstractions from Examples
 - [ ] Designing Abstractions with First-Class Functions
 - [ ] Mathematical Examples
 - [ ] Intermezzo 4: Defining Functions on the Fly
 V. Generative Recursion
 - [ ] A New Form of Recursion
 - [ ] Designing Algorithms
 - [ ] Variations on a Theme
 - [ ] Algorithms that Backtrack
 - [ ] Intermezzo 5: The Cost of Computing and Vectors
 VI. Accumulating Knowledge
 - [ ] The Loss of Knowledge
 - [ ] Designing Accumulator-Style Functions
 - [ ] More Uses of Accumulation
 - [ ] Intermezzo 6: The Nature of Inexact Numbers
 VII. Changing the State of Variables
 - [ ] Memory for Functions
 - [ ] Assignment to Variables
 - [ ] Designating Functions with Memory
 - [ ] Examples of Memory Usage
 - [ ] Intermezzo 7: The Final Syntax and Semantics
 VIII.
 - [ ] Encapsulation
 - [ ] Mutable Structures
 - [ ] Designing Functions that Change Structures
 - [ ] Equality
 - [ ] Changing Structures, Vectors, and Objects
 Epilogue
***** Structure and Interpretation of Computer Programs
***** Essentials of Programming Languages
**** Linux/Docker
***** How Linux Works
***** The Linux Command Line
***** Using Docker
*** D3
**** Pluralsight
***** WATCHEDONLY D3: The Big Picture : Ben Sullins (1:26)
***** D3.js Data Visualization Fundamentals : Ben Sullins (4:35)
***** Geospatial mapping with D3 : Ben Sullins (2:39)
***** Force LAyout Graphs in D3 : Ben Sullins (2:33)
*** JS
**** Pluralsight
***** WATCHEDONLY Advanced Javascript : Kyle Simpson ()
***** WATCHEDONLY JS Objects and Prototypes
***** WATCHEDONLY JS Best Practices : Jonathan Mills (2:39)
***** WATCHEDONLY JS.Next: ES6 : Aaron Frost (5:24)
***** DONE Reasoning About Async JS : Wes Higbee (2:05)
***** DONE JS Module Fundamentals : Brice Wilson (2:16)
***** CLOSED jQuery-free JS : Elijah Manor (2:26)
***** OPEN Practical Design Patterns in JavaScript : Jonathan Mills (3:10)
***** TODO Modern Asynchronous JavaScript : Wes Higbee (6:34)
***** TODO Testing Clientside JavaScript : Joe Eames (4:50)
***** TODO Front-End First: Testing and Prototyping JS Apps : Mark Zamoyta (2:27)
***** TODO Hardcore Functional Programming in JavaScript : Brian Lonsdorf (6:03)
***** Shifting JS into High Gear w/ Web Workers : Kasia Zmokia (3:13)
***** JavaScript Design Patterns : Aaron Powell (2:02)
**** Egghead
***** TODO Asynchronous Programming: The End of the Loop : Jafar Husain
***** Regex in JavaScript : Joe Maddalone
***** Learn how to use Immutable JS : J.S. Leonard
**** Udemy
***** DONE JavaScript: Understanding The Weird Parts : Anthony Alicea
***** Hardcore Functional Programming in JavaScript : Brian Lonsdorf (6:00)
**** FrontEndMasters
***** VIEWONLY Functional-Lite JS : Kyle Simpson (3:10)
***** Rethinking Async JS : Kyle Simpson (6:22)
***** Asynchronous Programming in Javascript : Jafar Husain (9:36)
*** databases
**** WATCHEDONLY Intro to Mongoose for Node.js & MongoDB : Mark Scott (1:41)
*** design
**** Pluralsight
***** DONE Responsive Typography : Jason Pamental (5:55)
***** DONE Responsive Web Images : Robert Boedigheimer (1:55)
***** DONE Web Accessibility: Getting Started (1:30)
***** Making a Web Form Accessible (1:47)
*** html/css
**** OPEN pendaticLayout
**** Pluralsight
***** DONE CSS Positioning : Susan Sumkins (0:50)
***** DONE Responsive Web Design : Ben Callahan (4:31)
***** DONE Modern Web Layout with Flexbox and CSS Grid : Brian Treese (1:14)
***** OPEN CSS3 In-Depth : Estelle Weyl (6:10)
***** HTML5 Advanced Topics : Craig Shoemaker (2:45)
***** HTML5 Browser Caching : Ben Schwarz (1:01)
***** CSS Animation with Transition and Transform : Sandy Ludosky (2:10)
***** Creating Elegant Nav. Using CSS3 Transitions : Susam Simkins (1:02)
**** FrontEndMasters
***** Motion Design with CSS : Rachel Nabors (4:01)
***** Animated SVG Animation : Sarah Drasner (2:53)
**** egghead
***** DONE Flexbox Fundamentals
*** docker
**** pluralsight
***** WATCHEDONLY Docker and Containers: The Big Picture : Nigel Poulton (1:47)
***** Play by Play: Docker for Web Developers with John Papa and Dan Wahlin (1:34))
***** Docker Deep Dive : Nigel Poulton (5:38)
*** node
**** Pluralsight
***** DONE Real-Time Web w/ Node.js : Kyle Simpson (5:23)
***** DONE RESTful Web Services with Node.js and Express (2:04)
***** DONE Build Web Apps with Node.js and Express 4.0 : Jonathan Mills (4:43)
***** DONE Securing Yours App w/ OAuth and Passport : Jonathan Mills
***** OPEN Intro to Node JS : Paul O'Fallon (2:48)
***** TODO Five Essential tools for REST APIs : Elton Stoneman (2:56)
***** HTTP Fundamentals : Scott Allen (2:50)
***** Node Application Patterns : Rob Conery (2:30)
***** FullStack NodeJS : Geoffrey Grosenbach (2:35)
***** Building Web Apps with Node.js : Kevin Whinnery (3:43)
**** FrontEndMasters
***** API Design with Node.js using Express : Scott Moss (10:18)
**** Udemy
***** OPEN Learn & Understand Node.js : Anthony Alicea (12:00+)
*** perf
**** Pluralsight
***** Web Performance : Robert Boedigheimer (2:51)
***** Using Google PageSpeed for Perf. : David Berry (3:19)
**** FrontEndMasters
***** Website Perf : Kyle Simpson (5:01)
***** 
*** react
**** DONE React.js Program: Fundamentals : Tyler McGinnis
**** DONE Facebook Official React Tutorial
**** DONE React Router Tutorial
**** Pluralsight
***** WATCHEDONLY Styling React Components : Jake Trent (1:29)
***** TODO Building Applications with React and Flux : Cory House (5:08)
***** TODO Building Applications with React and Redux in ES6: Cory House (6:14)
***** TODO Building a Full-Stack App with React and Express : Daniel Stern (3:24)
***** React Native Apps with Exponent and Redux : Hendrick (3:21)
***** Building iOS Apps with React Native : Hendrik Swanepoel (1:59)
**** Egghead
***** CLOSED React Fundamentals : Joe Maddalon
***** CLOSED Getting Started with React Router (egghead)
***** DONE Getting Started with Redux (egghead)
***** TODO Building React Apps w/ Idiomatic Redux
***** React Native Fundamentals : Tyler McGinnis
**** Udemy
***** DONE Modern React with Redux : Stephen Girder (10:00)
***** TODO Advanced React and Redux : Stephen Girder (12:00)
***** Build Apps with React Native : Stephen Grider (8:00+)
*** TypeScript
*** testing
**** Pluralsight
***** WATCHEDONLY Code Testability : Misko Hevery (0:51)
***** Testing JS w/ Jasmine and TypeScript : Tony Curtis (2:42)
***** Testing Client-Side JS : Joe Eames (4:50)
***** Unit Testing with Node.js : Joe Eames (1:26)
***** Node.js Testing Strategies : Rob Conery (2:39)
***** Mastering React Testing with Jest : Daniel Stern (1:57)
**** Egghead
***** OPEN React Testing Cookbook
*** tools
**** emacsHelp
**** Pluralsight
***** DONE Intro to NPM as a Build Tool : Marcus Hammarberg (1:37)
***** DONE Git Fundamentals : James Kovacs (1:51)
***** Mastering Git : Paolo Perrotta (2:42)
***** DONE NPM Playbook : Joe Eames (0:58)
***** WATCHEDONLY Meet Emacs : Phil Hagelberg (0:58)
***** TODO Advanced Git : Ben Hoskings (1:00)
***** TODO Babel: Get Started : Craig McKeachie (2:03)
***** Using the Chrome Dev. Tools : John Sonmez (2:50)
***** Getting Started with Emmet : Kristian Freeman (0:55)
**** FrontEndMasters
***** Mastering Chrome Developer Tools : Jon Kuperman (4:15)
**** egghead
***** WATCHEDONLY How to Contribute to an Open Source Project on Github
***** TODO Using Webpack for Production JS Apps


* Horizon
** Someday Languages
*** Elm
*** Elixir
*** Java
*** Rust
** MIT OpenCourseware
*** 6.01   - Intro to EE and CompSci
*** 18.01  - Single Variable Calculus
*** 6.042  - Mathematics for Computer Science
*** 6.006  - Intro to Algorithms
*** 18.02  - MultiVariable Calculus
*** 6.046  - Algorithms
*** 18.310 - Principles of Discrete Applied Math

