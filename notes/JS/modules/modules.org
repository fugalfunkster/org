* JS Module Fundamentals
** What is a Module?
"A group of code and data related to a particular piece of functionality. It encapsulates implementation details, exposes a public api, and is combined with other modules to build a larger application."
** Why use Modules?
- Create higher-level abstractions: black box that noise
- Encapsulation: Expose an interface, conceal the implementation
- Make Code Reusuable
- Simplify Dependency Management
** Module Patterns in ES5
*** IIFEs
Immediately Invoked Function Expression are anonymous functions that are invoked when they are 
declared. Bring anonymous has its advantages, an IIFE has no binding in its scope. 
  Additionally, because JS has function scope, you can encapsulate implementation logic within
an IIFE and be confident that internal bindings are not accessable from other areas of your 
code, avoiding global scope pollution. But, this pattern doesn't provide a method to manage 
dependences.

#+BEGIN_SRC js :results output
(function(name) {
  console.log(name);
}("Matthew"));
#+END_SRC

#+RESULTS:
: Matthew
*** Revealing Module Pattern
If we want to refer to a module by name, we can't use an IIFE, we need something that we can  
bind. The revealing module pattern does this by exposing it's public API as methods on an 
object returned from a function.
  The Revealing Module Pattern provides a clear delineation between its private implementation 
and its public API. Internal details are enclosed in the function, and the returned object provides public methods.
  Unfortunately, this pattern still doesn't provide dependency management.
**** Revealing Module Pattern - Singleton

#+BEGIN_SRC js :results output
  var scoreboard = function() {
    var message = 'Welcome to the Game!';
    function printMessage() {
      console.log(message);
    }
    return { showMessage: printMessage };
  }();

  scoreboard.showMessage();
#+END_SRC

#+RESULTS:
: Welcome to the Game!

**** Revealing Module Pattern - Constructor
In JS it is idiomatic to capitalize the first letter of a function's name when that function 
returns an object.

#+BEGIN_SRC js :results output
  var Scoreboard = function() {
    var message = 'Welcome to the Game!';
    function printMessage() {
      console.log(message);
    }
    return { showMessage: printMessage };
  };

  var scoreboard = Scoreboard();
  scoreboard.showMessage();
#+END_SRC

#+RESULTS:
: Welcome to the Game!

*** Dependency Management in the Dark Ages
When you're using the revealing module pattern or IIFEs, you'll want to put them in separate files. BUt once you do this, you have to manage dependencies manually by - literally - loading script tags in a specific order. Don't call a module before it has been loaded.

** Module Formats and Loaders
Module format is the syntax used to define a module. The module loader is a library that understands a specific module format, and how to load and execute those modules. 
*** Formats
**** Asynchronous Module Definition (AMD)
The AMD uses the revealing module pattern, and is most often used in the browser.
  You define AMD modules by calling the =define= function, provided by the loader. =define= 
takes two arguments: 
  1. An array of relative paths for any dependencies for the module, and
  2. A function that will recieve the return value of those dependencies as arguments.
Note that this format doesn't pollute the global scope. 

#+BEGIN_SRC js
define(['./player'], function(player) {
  console.log('Starting game for ' + player.getName());
  function calculateScore() {
    // do some math
  }
  return {
    calculateScore: calculateScore
  };
});
#+END_SRC

**** CommonJS
Most often used on the server, in Node.js. Node includes a built-in module loader.
  CommonJS modules expose a public api through the =module.exports= object, and it is common 
to see =exports= used as sugar for =module.exports=. Although you can assign an object 
literal, or a function, directly to module.exports, you cannot do so to =exports=.
***** Adding Methods to =module.exports=

#+BEGIN_SRC js
  var player = require('./player.js');
  console.log('Starting game for ' + player.getName());
  function calculateScore(){
    // do some math
  }
  function printGame(){

  }
  module.exports.calculateScore = calculateScore;
  module.exports.printGame = printGame;
#+END_SRC

***** Adding Methods to  =exports=

#+BEGIN_SRC js
  var player = require('./player.js');
  console.log('Starting game for ' + player.getName());
  function calculateScore(){
    // do some math
  }
  function printGame(){

  }
  exports.calculateScore = calculateScore;
  exports.printGame = printGame;
#+END_SRC

***** Assigning an Object to =module.exports=

#+BEGIN_SRC js
  var player = require('./player.js');
  console.log('Starting game for ' + player.getName());
  function calculateScore(){
    // do some math
  }
  function printGame(){

  }
  module.exports = { calculateScore: calculateScore,
                     printGame: printGame };
#+END_SRC

***** Assigning a function to =module.exports=

#+BEGIN_SRC js
  var player = require('./player.js');
  console.log('Starting game for ' + player.getName());
  function calculateScore(){
    // do some math
  }
  module.exports = calculateScore;
#+END_SRC

**** Universal Module Definition (UMD)
This format attempts to be compatible with both AMD and CommonJS. This can be helpful when you want to use a dependency on the client and server.
**** System.register
A custom format for the System.js loader. Not common...
*** Loaders
**** RequireJS (AMD)
See AMD format above for code example of a module.\

To use Require.js, we'll use npm.

#+BEGIN_SRC 
  $ npm install requirejs --save
#+END_SRC

Once our entry point and modules are in AMD format, we need to use require to connect everything. We do this in our HTML with a script tag that references require.js, and provides our app's main source file.

#+BEGIN_SRC html
  <script data-main="js/app" src="node_modules/requirejs/require.js"></script>
  <!-- Other script tags removed -->
#+END_SRC

When out HTML loads, the require.js script loads, first, then the main entry point to our app, then the entry's points dependencies, and the dependencies' dependencies, and so on... Require.js initiates the loading of these files.

When we start our server, and examine the global window object, we notice that it has a require method, but that our modules are not bound in the global scope. Instead, each source file, including the main entry point, is a module, that requires other modules. Thus, modules are available through require's define function which binds module files to function parameters.

**** SystemJS (AMD, CommonJS, UMD, System.register)
See the CommonJS format above for a sample module.

To use System.js, we'll use npm.

#+BEGIN_SRC 
  npm install systemjs --save
#+END_SRC

In our index.html file, we reference System.js and write some inline javascript that tells System.js which module format we intend to use - in this case, 'cjs' = CommonJS - and the entry point for our app.

#+BEGIN_SRC html
  <script src="node_modules/systemjs/dist/system.js"></script>
  <script>
    System.config({
      meta: {
        format: 'cjs'
      }
    });
    System.import('js/app.js');
  </script>
#+END_SRC

** Native Modules in ES2015
*** Export
Export allows us to expose a module's public API. We can export items at declaration, or all at once as a list. And, we can specify a 'default' export, which provides a specific target for generic import statements.
**** named exports
Named exports are available using the name of the binding within the module. 
***** using inline exports

#+BEGIN_SRC js
  // scoreboard.js
  export function addResult(newResult){
    // do some math
  }
  export function updateScoreBoard() {
    // do some more math
  }
  function somePrivateFunction() {
    // not part of the API
  }
  export let homeTeam = 'Tigers';
#+END_SRC

***** using an export object

#+BEGIN_SRC js
  // scoreboard.js
  function addResult(newResult){
    // do some math
  }
  function updateScoreBoard() {
    // do some more math
  }
  function somePrivateFunction() {
    // not part of the API
  }
  let homeTeam = 'Tigers';
  export { addresults, updateScoreboard, homeTeam as team }; // note exprting an alias using =as=
#+END_SRC

**** default exports
When making an inline export, the =default= keyword can follow the export keyword.

#+BEGIN_SRC js
  // scoreboard.js
  export default function addResult(newResult){
    // do some math
  }
  export function updateScoreBoard() {
    // do some more math
  }
  function somePrivateFunction() {
    // not part of the API
  }
  export let homeTeam = 'Tigers';
#+END_SRC
*** Import
Import allows us to access a dependency. We can choose to import an entire module, or just a part of the module. And we can create aliases for imported items.
**** Importing a Default Value

#+BEGIN_SRC js
  import React from 'react';
  //  React.render
#+END_SRC
 
**** Importing a Default Value with an Alias

#+BEGIN_SRC js
  import React as R from 'react'
#+END_SRC

**** Importing a Default Object and Additonal Bindings

#+BEGIN_SRC js
  import React, { Component, PropTypes } from 'react';
#+END_SRC

**** Importing Specific Bindings

#+BEGIN_SRC js
  import { addResult, updateScoreboard } from './scoreboard';
#+END_SRC

**** Importing Specific Bindings with Alias

#+BEGIN_SRC js
  import { addResult as add, updateScoreboard as update} from './scoreboard';
#+END_SRC

**** Importing All Bindings

#+BEGIN_SRC js
  import * as scoreboard from './scoreboard';
#+END_SRC

*** Transpilation with Babel
Babel transpiles ES6 modules to CommonJS modules by default. So, you'd have to use SystemJS, 
and reference your build directory in the config script for the app's entry point, if your 
build setup doesn't handle this for you.
  To avoid using a third-party loader, use a module bundler.

** Module Bundlers
Bundlers do what loaders do, but during a build step that produces a single output file. This results in fewer files, which can have performance benefits. Additionally, this build process can include other actions, like transpilation and minification.
*** Browserify
Browserify uses CommonJS modules, the idea being that it makes node.js modules available on 
the client. Browserify works from the CLI:

#+BEGIN_SRC bash
  $ npm install browserify --save-dev
  $ mkdir build
  $ ./node_modules/.bin/browserify js/app.js --outfile build/bundle.js
#+END_SRC

Now we need to reference our bundled code in our index.html.

#+BEGIN_SRC html
  <script src="./build/bundle.js"></script>
#+END_SRC

*** Webpack
Webpack can be used to bundle any module format, transpile using the babel loader, and provide other functionality through loaders and pluging. Webpack can also split code, enabling you to separate out vendor dependencies or creating multiple app entry points. Finally, webpack can also bundle other resources, like css and images.
**** With AMD Modules

#+BEGIN_SRC bash
  $ npm install webpack --save-dev
  $ ./node_modules/.bin/webpack js/app.js build/bundle.js
#+END_SRC

#+BEGIN_SRC html
  <script src="./build/bundle.js"></script>
#+END_SRC

**** With ES2015 Modules and Babel

#+BEGIN_SRC bash
  $ npm install webpack --save-dev
  $ npm install babel-loader babel-core --save-dev
#+END_SRC

#+BEGIN_SRC js
  //webpack.config.js
  module.exports = {
    entry: '/js/app.js',
    output: {
      path: './build',
      filename: 'bundle.js'
    },
    module: {
      loaders: [{
        test: /\.js$/,
        exclude: /node_modules/,
        loader: 'babel-loader',
        query: {
          presets: ['es2015']
        }
      }]
    }
  };
#+END_SRC

#+BEGIN_SRC bash
  $ ./node_modules/.bin/webpack
#+END_SRC

#+BEGIN_SRC html
  <script src="./build/bundle.js"></script>
#+END_SRC


* Additional Courses
** Structuring JavaScript Code
** Practical Design Patterns in JS
** RequireJS: JS Dependency Injection and Module Loading
** Modern, Modular JS with SystemJS and jspm
** JavaScript Funcamentals for ES6
** Babel: Get Started
** Creating JavaScript MOdules with Browserify
** Webpack Fundamentals


* YDKS: Scope & Closures - Ch.? Modules...

* Loose Ends
** Rollup?
** Bower?
** Other Patterns?
