* JS Charts with D3 v4
** Getting started
D3 v4 was rewritten to take advantage of ES6 modules. This means you can create custom bundles instead of using the whole library. Treeshaking tools, like rollup, do this for you. Or you can manually include different modules as needed.
** Linear Scales
Scales let you proportionally map inputs to output. When scaling, you first set the boundaries of your input, this is called the domain, and is represented as an array containing two numbers. Next, we set the boundaries of the output, this is called the range, and is represented as an array of two numbers.
  Linear scales are a type of continuous scale, and any value withing a domain will 
map to a value within the range - a continuous spectrum of values. When we input numbers into our scale, the output is a function of the domain and range. 

output = input * ( range[1] - range[0] / domain[1] - domain[0] )

*** clamp
If the input falls outside of the domain, the scale will return a number that is outside of the range. If we want to prevent this from happening, we can use clamp. clamp manipulates any input that falls outside of the domain to be the maximum or minimum domain value.

*** invert
invert allows us to reverse the flow, effectively using the range as the domain and the domain as the range, resulting in an inversion of the proportional mapping.

*** code sample

#+BEGIN_SRC js
var linearScale = d3.scaleLinear()
  .domain([0, 100])
  .range([0, 600])
  .clamp(true);

console.log(linearScale(-20));           // 0    = 0 (clamped)
console.log(linearScale(50));            // 300  = 50 * (600 / 600) = 50 * 6
console.log(linearScale(75));            // 450  = 75 * (600 / 100) = 75 * 6
console.log(linearScale.invert(300));    // 50   = 300 * (100 / 600) = 300 / 6
#+END_SRC

** Time Scales - Converting Dates to Numeric Values
Working with time in JavaScript can already be frustrating. Thankfully D3 provides a time scale, that allows you to map input t output proportionately. This comes in handy when you have a range of dates, and you need to translate that to x,y coordinates for a visualization.
*** Code sample

#+BEGIN_SRC js
var timeScale = d3.scaleTime()
  .domain([new Date(2016, 0, 1), new Date()])
  .range([0, 100]);

console.log(timeScale(new Date(2016, 0, 15)));   // 4.451286110285363
console.log(timeScale(new Date(2016, 3, 15)));   // 33.37139795181199
console.log(timeScale(new Date()));              // 100.00000005887945
console.log(timeScale.invert(50));     // Mon Jun 06 2016 07:11:24 GMT-0700 (PDT)

#+END_SRC
** Quantize Scales - Creating Labels from Numeric Data
When you want to map numeric input to a non-continuous set of output values, you aren't going to be able to use a continuous scale. 
  The quantize scale only permits output values that appear in the range 
array, and breaks the domain into 'chunks' that map to the values in the range. Each chunk represents a fraction of the domain, equal to the total domain and the number of values in the range.
  This is helpful for mapping numeric values to string values. 
*** invertExtent
We can use an output value to receive the delimiters of the domain chunk that maps to that output value. When working with numeric values, this doesn't work.
*** Code sample:

#+BEGIN_SRC js

var numberScale = d3.scaleQuantize()
  .domain([0, 100])
  .range([0, 100]);

console.log(quantizeScale(22));    // 0
console.log(quantizeScale(50));    // 100
console.log(quantizeScale(88));    // 100
console.log(quantizeScale.invertExtent(88));  // NAN, NAN

var colorScale = d3.scaleQuantize()
  .domain([0, 100])
  .range(["red", "white", "green"]);

console.log(quantizeScale(22));    // red
console.log(quantizeScale(50));    // white
console.log(quantizeScale(88));    // green
console.log(quantizeScale.invertExtent('white'));  // 33.3, 66.6

#+END_SRC

** Ordinal Scales - Create Labels from Non-Numeric Data
Whereas quantize scales map a continuous domain to a discrete range, when you want to map a discrete domain to a discrete range, we use a ordinal scale. There is a one to one mapping going on here.
  Note, that if the length of the domain if more than the length of the range, the 
range will wimply repeat its contents - in order - to match the domain's length
*** Code Sample
#+BEGIN_SRC js
var ordinalScale = d3.scaleOrdinal()
  .domain(['poor', 'good', 'great'])
  .range(['red', 'white', 'green']);

console.log(ordinalScale('good'));  // white
console.log(ordinalScale('great')); // green
console.log(ordinalScale('poor'));  // red
#+END_SRC
** Load and Inspect Data
D3 provides multiple data formatting methods. These accept a data source, and a callback that will recieve the formatted data. =d3.json= - =d3.csv= - =d3.tsv=

#+BEGIN_SRC js
d3.json(dataSource, (data) => {
  // do stuff with =data=
}
#+END_SRC

*** min, max, & extent
=min= returns the lowest value from a data set for a given key, using a reduce like function. =max= does the opposite. And extent returns an array containing the min and the max.

#+BEGIN_SRC js
  let min = d3.min(data, function(d) {
    return d.keyOfInterest;
  });
#+END_SRC

Extent is super handy, because it allows you to programatically generate a domain value for a data set. =extent= returns an array of two numbers.

#+BEGIN_SRC js
  var extent = d3.extent(data, function (d) {
    return d.keyOfInterest;
  });
#+END_SRC

*** set
Sometimes you only want to have unique values in your data. the .set method returns an array of only unique values.

#+BEGIN_SRC js
const set = d3.set(data, function (d) {
  return d.keyOfInterest;
});
#+END_SRC

** Select DOM Elements
Selections are fundamental to doing work in D3. the select and selectAll methods take a css selector string as their argument, and return a single DOM node. =.select()= returns the first dom node that matches the selector, and =.selectAll()= returns an array of all DOM nodes that match the selector.
  Note that you can call select on prior selections. See line 2 of the code sample.

#+BEGIN_SRC js
var div = d3.select('div');
var divLinks = div.selectAll('a');
var secondLink = d3.selectAll('a:nth-child(2)');
var allLinks = d3.selectAll(document.links);
#+END_SRC

** Modify DOM Elements
Once we have a DOM node, we can access properties of that node, and modify them.  Say we had a link element, and wanted to inspect the href attribute, we access it with:

#+BEGIN_SRC js
d3.selectAll('a:nth-child(2)')
  .attr('href');
#+END_SRC

If we want to set properties, we pass the name of the property, and the value we want it to have:

#+BEGIN_SRC js
d3.selectAll('a:nth-child(2)')
  .attr('href', 'http://google.com')
//.style('color', 'red') inline style
  .classed('red', true)
//.text('Inner Text')
  .html('Inventory <b>SALE</b>');

/* 
this is functionally the same as 
  let node = d3.selectAll('a:nth-child(2)');
  node.attr('href', 'http://google.com')
  node.classed('red', true)
  node.html('Inventory <b>SALE</b>');
*/
#+END_SRC

Mind the dot chaining. When D3 has the reference to the dom node, it will return that node wrapped in a D3 object, so you can call these with methods.

** Create DOM Elements
Once we have selected a dom element, we can mutate that dom element. The =.append= method appends a new HTML element on the selected node.
  Mind the dot! The DOM element that is returned by the .append method is the newly 
created node. Not the original DOM element. It is idiomatic to indent DOM modifications relative to the DOM element selected.
  In the example below, we select a div with the .title class, we'll call this the 
parent div. Then we append a div to the parent, appending creates the element as the last element in the parent. We format that inner div, and then append a button, which places it inside the inner div. 

#+BEGIN_SRC js
d3.select('.title')
  .append('div')
    .style('color', 'red')
    .html('Inventory <b>SALE</b>')
  .append('button')
    .style('display', 'block')
    .text('submit');
#+END_SRC

We can also remove a DOM element with the =.remove()= method.

** Data Joins: Reifying Data
Data joins are how we associate data and DOM elements.
*** Selections Revisited
  When we make a DOM selection, we can use the =.data= method to join (associate) 
data with that selection. This is pretty abstract, because we can associate data - say an array of objects - with a selection - say all of the divs in the element(s) with the .chart class. 
  Remember that the selection method allows us to access DOM elements through D3. 
However, we might make a selection for DOM elements that do not exist. The selection is empty. Regardless, we can still associate data with an empty selection.
*** Joining Data
Under the hood, a data join assigns a UID to each piece datum or element, and 
uses the index of the datum or element by default. This pairs the first element in the selection with the first datum in the data. If there are no elements, only datum recieve UIDs. If only elements, likewise. Etc. To they extent that the elements and data have parallel indicies, they are joined.

*** Data Join State
Once data is joined to a selection, the relationship between data and elements 
can be represented as a venn diagram of three states: 
  - =enter= is a state in which data is associated with a selection that contains no elements;
  - =update= is a state in which data is mapped to elements
  - =exit= is a state where elements do not have corresponding data

"The update selection is returned by =selection.data=, while the =.enter= and =.exit= selections hang off the update selection; =updateSelection.enter()= thus returns the enter selection." And =updateSelection.exit()= thus returns the exit selection. 
*** Joining Data to Existing Elements
When you perform a data join, the =.data= method takes an optional second argument: the 'key' function, which independently pairs data and elements with unique IDs. The key function takes each element in the selection, and each data point in the join as input, and assigns each a key based on the return value of the key function - for example a string, such as a name. 
  Once the elements and data have recieved their uids, the two are matched - data 
and elements that share a uid are joined. These represent the update state. Some elements, however, may not have a data to join, and will thus express the exit state. And, data may not be joined to an element, and will thus expresses the enter state.
  In our example, the function assigns elements and data to a unique 
identifier: its .innerText or .name.
*** The Update Selection API
**** enter
When we call =updateSelection.enter()=, we recieve data that is not associated 
with dom elements, and thus we can append elements to our selection for data that does not already have a dom node associated with it. 
**** exit
The exit selection is useful to clean up the DOM after elments or data has 
changed. =updateSelection.exit()= returns those elements that do not have corresponding data. Calling =.remove()= on those elements removes them from the DOM.
**** merge
Once we have selections, we can merge them together, to manipulate them in tandem. The update selection exposes the =.merge()= method, which accepts another selection. By using merge, we can update all elements or data in the update and enter or exit selection. 
*** More on Selections, Joins, and Constancy
More on Selections and Data Joins: https://bost.ocks.org/mike/selection/
For more on the theory of data joins: https://bost.ocks.org/mike/join/
More on Constancy:  https://bost.ocks.org/mike/constancy/
*** Code Example

#+BEGIN_SRC html
 <div class="chart">
    <div>Billy</div>
    <div>Cindy</div>
    <div>Walter</div>
  </div>
#+END_SRC

#+BEGIN_SRC js
var scores = [
  { name: 'Alice', score: 96 },
  { name: 'Billy', score: 83 },
  { name: 'Cindy', score: 91 },
  { name: 'David', score: 96 },
  { name: 'Emily', score: 88 }
];

var update = d3.select('.chart')          // this selects the .chart div
  .selectAll('div')                       // this selects all divs in .chart
  .data(scores, function (d) {            // this goes through each data point,
    return d ? d.name : this.innerText;   //   and creates an id using d.name or
    })                                    //   the inner text of the div 
  .style('color', 'blue');                //  

var enter = update.enter()                // enter selects those data that lack
  .append('div')                          // an element, appends an element, and
  .text(function (d) {
    return d.name;
  })
  .style('color', 'green');

update.exit().remove();

update.merge(enter)
  .style('width', d => d.score + 'px')
  .style('height', '50px')
  .style('background', 'lightgreen')
  .style('border', '1px solid black')
#+END_SRC

** Output SVG Elements
The previous section described how to bring our data into the enter state, and then append elements to that enter-state data, to reify our data in the DOM. We will often want to establish a root element for our data visualization, and an SVG element is ideal - SVG is easy to scale.
  However, svg doesn't behave in the same way DOM elements behave. CSS property 
names, and layout are notably different. And, when working with SVG, everything is assumed to be pixels, so no pixel postfixes are not necessary. Finally, SVGs, though scalable, are not dynamic, thus a parent SVG must be adequately sized to contain its children, or they will be cut off.
*** Code Example 
#+BEGIN_SRC js
var scores = [
  { name: 'Alice', score: 96 },
  { name: 'Billy', score: 83 },
  { name: 'Cindy', score: 91 },
  { name: 'David', score: 96 },
  { name: 'Emily', score: 88 }
];

d3.select('.chart')
  .append('svg')
    .attr('width', 225)
    .attr('height', 300)
  .selectAll('rect')
  .data(scores)
  .enter()
    .append('rect')
    .attr('y', (d, i) => i * 33)
    .style('width', d => d.score)
    .text(function (d) {
      return d.name;
    })
    .attr('class', 'bar');
#+END_SRC

*** Layout
SVG elements do not follow the CSS layout schemes (block, inline, etc). Instead all SVG elements have a default position there their top-left corner is at the origin (the top left corner of the containing SVG element).
  To place elements throught the SVG element, we can set the =y= or =x= 
attribute. of a selection. Bexause we're working with selections, we'll want our setter to be dynamic. In D3, there is an idiomatic dunction signature, in which the first argument to the function is the data node itself, and the second argument is the index of that data node. This allows us to offset elements from each other:

#+BEGIN_SRC js
  .attr('y', (d, i) => i * 33)
#+END_SRC

*** On CSS styles with svg (and when to use attr or .classed)
SVG elements use different style elements that normal DOM elements. 
| css        | svg          | diff                |
|------------+--------------+---------------------|
| background | fill         | background color    |
| border     | stroke       | color not thickness |
|            | stroke-width | border width        |
 

Consider using attr to set classes to set classes statically, and using .classed for classes you might want to toggle, as classed accepts a class and a boolean as arguments. 

#+BEGIN_SRC css
.chart {
  background: lightgray;
  border: 1px solid black;
  min-width: 200px;
  min-height: 350px;
}
.bar {
  height: 30px;
  color: green;
  fill: lightgreen;
  stroke: black;
  stroke-width: 1;
}
#+END_SRC

** SVG Graphics Containers and Text Elements
Unlike DOM elements, SVG elements do not have text properties. Instead SVG provides a text element. But, now that we have text and rect and circle elements, we need a means of combining and organizing them.
*** Creating a Selection of =g= elements
The =g= element is analagous to the =div= element in html. They allow us to group 
other elements inside of them. However, g elements do not take =xy= coordinates like other SVG element, and to position them we must transform them. The function we pass to transform uses the translate function, which accepts =x= and =y= as arguments, and sets them for the =g= element. 

#+BEGIN_SRC js
var bar = d3.select('.chart')
  .append('svg')
    .attr('width', 225)
    .attr('height', 300)
  .selectAll('g')
  .data(scores)
  .enter()
    .append('g')
    .attr('transform', (d, i) => 'translate(0, ' + i * 33 + ')');
#+END_SRC

*** Appending =rect= elements to our selection of =g= elements

#+BEGIN_SRC js
bar.append('rect')
    .style('width', d => d.score)
    .attr('class', 'bar');
#+END_SRC

*** Appending =text= elements to out selection of =g= elements
Note that text elements are anchored differently than rects. The blttom left corner of a text defaults to the bottom-right corner of its parent svg element, and considers that point the origin.

#+BEGIN_SRC js
bar.append('text')
  .attr('y', 20)
  .text(function (d) {
    return d.name;
  });
#+END_SRC
** Basic Interactivity
D3 allows us add event handlers to our SVG elements with the =.on= method, which accepts an event string, and a callback function that is invoked on the event. Note that inside our callback function, the =this= keyword refers to the element which fired the event - assuming you're not using an arrow function.
  With the =this= keyword, we have a reference to the element that triggered the 
event, and can use d3 to select that element so we can act on it. This behaves just like selections as covered earlier. We can manipulate the attributes of the selection, add or remove classes. We can also manipulate all elements in the parent selection by referencing =elements= in the callback we pass to the =.on= method.
  With a reference to the parent elements, we can filter out elements in a 
selection using =.filter=. Filter is a method that acts on an existing selection, and returns a filtered selection. In our example, we use filter to transform all of the elements from the parent selection that did not fire the event. 

#+BEGIN_SRC js
bar.append('rect')
    .style('width', d => d.score)
    .attr('class', 'bar')
    .on('mouseover', function (d, i, elements) {
      d3.select(this).style('transform', 'scaleX(2)');
      d3.selectAll(elements)
        .filter(':not(:hover)')
        .style('fill-opacity', 0.5);
    })
    .on('mouseout', function (d, i, elements) {
      d3.select(this).style('transform', 'scaleX(1)');
      d3.selectAll(elements)
        .style('fill-opacity', 1);
    });
#+END_SRC
** Better Code Organization with selection.call()
D3's API facilitates extensive dot chaining, but this can make code harder to reason about and difficult to organize and make modular. Instead of dot chaining everything, we can use =selection.call=, which accepts a function and an argument to pass to that function. 
  When the function passed to =selection.call= is called, it recieves the selection 
as its first argument, and the second argument passed to =.call= as its second argument. The =.call= method returns the selection - post modification - allowing further dot chaining.

#+BEGIN_SRC js
function scaleBar (selection, scale) {
  selection.style('transform', 'scaleX(' + scale + ')');
}

function setFill (selection, color) {
  selection.style('fill', color);
}

function fade (selection, opacity) {
  selection.style('fill-opacity', opacity);
}

bar.append('rect')
    .style('width', d => d.score)
    .attr('class', 'bar')
    .on('mouseover', function (d, i, elements) {
      d3.select(this)
        .call(scaleBar, 2)
        .call(setFill, 'orange');

      d3.selectAll(elements)
        .filter(':not(:hover)')
        .call(fade, 0.5);
    })
    .on('mouseout', function (d, i, elements) {
      d3.select(this)
        .call(scaleBar, 1)
        .call(setFill, 'lightgreen');

      d3.selectAll(elements)
        .call(fade, 1);
    });
#+END_SRC

** Margin Convention
D3 provides a way to give a chart axes, but for there to be room for those axes, we have to leave a margin around out viz. There is an idiomatic approach within the D3 community to setting margins.
  Create a margin object, with =top=, =right=, =bottom=, and =left= properties. We 
then create a width var, that we set equal to the width of the containing element, less the sum of out left and right margins. And we also create a height var, and set it to the height of our containing element, less the sum of the top and bottom margins.
  With our height and width set, we can programatically set the dimensions of our 
top level svg element, which is equal to the dimensions of the inner element with the margins added. Similarly, the dimensions of the inner element are the width and height.
  To align the inner element within the outer element, we must translate it's 
original position using the margin properties.

Note in this example, the svg selection variable is in fact the =g= element last returned by the dotchaining. 

#+BEGIN_SRC js
var margin = { top: 10, right: 20, bottom: 25, left: 25 };
var width = 425 - margin.left - margin.right;
var height = 625 - margin.top - margin.bottom;

var svg = d3.select('.chart')
  .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
  .append('g')
    .attr('transform', `translate(${margin.left}, ${margin.top})`);

svg.append('rect')
  .attr('width', width / 2)
  .attr('height', height)
  .style('fill', 'lightblue')
  .style('stroke', 'green');

svg.append('rect')
  .attr('x', width / 2)
  .attr('width', width / 2)
  .attr('height', height)
  .style('fill', 'lightblue')
  .style('stroke', 'green');
#+END_SRC
** Create Chart Axes
Axes and scales are linked: An axis is a visual representation of a scale, where the domain represents the boundaries of the data being graphed, and the range represents the dimensions of the graph itself.
*** Linear
To create an axis based off of a linear scale, we create the scale as above, but for the range we use the dimensions of the visualization - out width and height variables. For a =y= axis, it begins at the bottom of the vis, and thus starts at the =height= value, and moves to 0. For an =x= axis, the range would start at 0 and go to the =width=.
  Once the scale is made, we pass it to the =d3.axisLeft= method, which automatically generates a axes with sensibly 
generated tick marks. This axis is then appended to the parent selection by passing the axis to the selection's =.call= method.

#+BEGIN_SRC js
var yScale = d3.scaleLinear()
  .domain([0, 100])
  .range([height, 0]);
var yAxis = d3.axisLeft(yScale);
svg.call(yAxis);
#+END_SRC

*** Time
Time axes are similar, but the creation of the scale differs. 

#+BEGIN_SRC js
var xScale = d3.scaleTime()
  .domain([new Date(2016, 0, 1, 6), new Date(2016, 0, 1, 9)])
  .range([0, width]);

var xAxis = d3.axisBottom(xScale);
svg.call(xAxis);
#+END_SRC

*** Axis Layout
When we create an xAxis, using =.axisBottom=, notice that the tick labels appear below the axis, but the axis appears at the top of the visualization. To remedy this, we need to append a =g= element to our svg so that we can transform and translate the location of the =g= element to the borrom of the parent, and append the axis to that positioned =g= element.

#+BEGIN_SRC js
svg
  .append('g')
    .attr('transform', `translate(0, ${height})`)
  .call(xAxis);
#+END_SRC

*** Ticks
D3 will set default ticks values based on its interpretation of your data. However, we can make suggestions or override defaults entirely:
- The =.ticks= method accepts a number - which suggests to D3 how many ticks there should be - and a string that will appear after the tick label content, which can be used to clarify the data's units of measurement.
  - d3 has many methods that can produce values that you can pass to the =.ticks= method, to set the tick interval and output.
- =.tickValues= sets the values that will appear on the access, overriding the default tick values.
- =.tickSize= sets the lengths of each tick.
  - You can also set =.tickSizeInner=, and =.tickSizeOuter= individually.
- =.tickPadding= offsets the tick text from the tick itself.

#+BEGIN_SRC js
var xAxis = d3.axisBottom(xScale)
  .ticks(5, "%")
  .tickSize(10)
  .tickPadding(5);
#+END_SRC

** Make Charts Responsive with the viewBox attribute
"The viewport is the viewing area where the SVG will be visible. ... You specify the size of the viewport using the width and height attributes on the outermost SVG element." This is what we do when we follow the D3 margin conventions, and provide calcualted values to the root SVG element for width and height.
  The viewbox is the actual coordinate system, used to draw the SVG elements onto the canvas. The viewbox takes a 
minimum x and y, width and height. These dimensions crop the SVG graphic, and then scale up the SVG graphic to fill the entire viewport.

For more on the SVG coordinate system: https://sarasoueidan.com/blog/svg-coordinate-systems/
*** Manually Setting the ViewBox
#+BEGIN_SRC js
var margin = { top: 10, right: 20, bottom: 30, left: 30 };
var width = 400 - margin.left - margin.right;
var height = 600 - margin.top - margin.bottom;
var fullWidth = width + margin.left + margin.right;
var fullHeight = height + margin.top + margin.bottom;

var svg = d3.select('.chart')
  .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .attr('viewBox', `0 0 ${fullWidth / 2} ${fullHeight / 2}`)
  .append('g')
    .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');
#+END_SRC

*** Using responsivefy
This utility allows you to programatically resize the viewport while preserving the aspect ratio of the visualization. The utility measures the parent element that our SVG appends to, and calculates the aspect ratio of our SVG, as rendered from the width and height values we assign in accordance with D3 and the margin convention. The utility then sets the viewbox to equal the width and height of the SVG, before setting the dimension of the viewbox to equal the width of the parent element and the height as appropriate for the aspect ratio.
  This utility also sets up a resize listener, to recalculate the viewport when the browser is resized. Thus, on a 
resize, the viewbox does not change, but the viewport does, and the viewbox scales to match the viewport.

#+BEGIN_SRC js
var margin = { top: 10, right: 20, bottom: 30, left: 30 };
var width = 400 - margin.left - margin.right;
var height = 600 - margin.top - margin.bottom;

var svg = d3.select('.chart')
  .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .call(responsivefy)
  .append('g')
    .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

svg.append('rect')
  .attr('width', width)
  .attr('height', height)
  .style('fill', 'lightblue')
  .style('stroke', 'green');

var yScale = d3.scaleLinear()
  .domain([0, 100])
  .range([height, 0]);
var yAxis = d3.axisLeft(yScale);
svg.call(yAxis);

var xScale = d3.scaleTime()
  .domain([new Date(2016, 0, 1, 6), new Date(2016, 0, 1, 9)])
  .range([0, width]);

var xAxis = d3.axisBottom(xScale)
  .ticks(5)
  .tickSize(10)
  .tickPadding(5);
svg
  .append('g')
    .attr('transform', `translate(0, ${height})`)
  .call(xAxis);

function responsivefy(svg) {
  // get container + svg aspect ratio
  var container = d3.select(svg.node().parentNode),
      width = parseInt(svg.style("width")),
      height = parseInt(svg.style("height")),
      aspect = width / height;

  // add viewBox and preserveAspectRatio properties,
  // and call resize so that svg resizes on inital page load
  svg.attr("viewBox", "0 0 " + width + " " + height)
      .attr("preserveAspectRatio", "xMinYMid")
      .call(resize);

  // to register multiple listeners for same event type,
  // you need to add namespace, i.e., 'click.foo'
  // necessary if you call invoke this function for multiple svgs
  // api docs: https://github.com/mbostock/d3/wiki/Selections#on
  d3.select(window).on("resize." + container.attr("id"), resize);

  // get width of container and resize svg to fit it
  function resize() {
      var targetWidth = parseInt(container.style("width"));
      svg.attr("width", targetWidth);
      svg.attr("height", Math.round(targetWidth / aspect));
  }
}
#+END_SRC
** TODO Column Chart
** Scatter Plot
** Line Chart
** Area Chart
** DONE Debug with Dev Tools
When we select an element in the chrome dev tools, we can reference that selected element with =$0= in the console. This allows us to access attributes on that dom node through the console. We can't directly modify the property because there is no two-way binding. We could use the D3 global to select and modify though: =d3.select($0).attr('r', 50)=.
  When D3 associates data with a DOM element, it attaches that data using as the 
=__data__= property on that DOM object.
** DONE Animate Transitions
D3 provides animation methods using its stylistic dot-chaining. Note that when chaining transitions, anything that is not explicitly set on a second transition, but is set on the prior one, will inherit from the prior transition!

#+BEGIN_SRC js
d3.select('#block')
  .transition()
    .duration(500)
    .delay(750)
    .ease(d3.easeBounceOut)     // easeCubicOut, easeElasticOut
    .style('width', '400px');
/* We can also dot-chain transitions, to create sequences of transitions
  .transition()
    .duration(500)
    .delay(750)
    .ease(d3.easeBounceOut)     // easeCubicOut, easeElasticOut
    .style('height', '600px')
  .transition()
    .duration(2000)
    .ease(d3.easeQuadOut)
    .style('background-color', 'purple'); 
*/
#+END_SRC
** TODO Reuse Transitions
** Animate with the General Update Pattern


* TODO Version4 - By Module
** d3-selection
** d3-scale
** d3-axis
** d3-shape
** d3-heirarchy (CPC Sections)
** d3-force
** d3-drag
