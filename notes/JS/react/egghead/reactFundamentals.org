* React Fundamentals (egghead)
** JSX
JSX is an HTML-like syntax, all JXS is transpiled into JS
Ex: 
#+BEGIN_SRC js
React.createElement('h1', null(props), 'inner html');
#+END_SRC
** Class Component
extends React.Component
always has a render method, that returns jsx
** Stateless Function Component
different than a class that extends React.Component
class components can have stateclass Toggle extends React.Component {
  static defaultProps = {onToggle: () => {}}
  state = {on: false}
  toggle = () =>
    this.setState(
      ({on}) => ({on: !on}),
      () => {
        this.props.onToggle(this.state.on)
      },
    )
  render() {
    const {on} = this.state
    return (
      <Switch on={on} onClick={this.toggle} />
    )
  }
}
function App() {
  return (
    <Toggle
      onToggle={on => console.log('toggle', on)}
    />
  )
stateless function components do not have state
props are passed into SFCs as argument
** The Render Method
The Render method is only allowed to return a single node. Adjacent JSX elements must be 
wrapped in an enclosing tag. Be careful with wrapping our return statement in the render 
method.
** Intro to Props
A lot like setting an attribute on an html element, or passing arguments to a function. we 
access props on our component as this.props.whatever. To access props, we can interpolatie in 
JSX <tag>{this.props.whatever}</tag>
** App.propTypes
We can define the property types the component expects, to affect basis type checking for 
props. App.propTypes can be assigned an object where each name is the prop name and each value 
is a React.PropTypes.Type. Ex:
- React.PropTypes.string
- React.PropTypes.number
- React.PropTypes.number.isrequired (makes the prop required)
** App.defaultProps
Setting default props follows the same pattern as App.propTypes. The object names are the prop 
names, and each value is the default value.
** State Basics
State is used for properties on a component that will change, versus static properties that 
are passed in. Our state model is a POJO that a component will manage itself. Within a 
component, we access state throughout the class as this.state.txt.
** Initializing a class component's state with the constructor method
Class components can have a constructor method, which calls super(). This provides context for 
the 'this' keyword within our component when using ES6 class syntax. After calling super, we 
can declare 'this.state = {};' with out starting state. 
** Setting State
The idiomatic way to change the state object is with 'this.setState = {}'. setState lets us 
update only what we specify, letting us avoid repeating properties that do not change.
** Binding 'this' for events
You can bind 'this' for any method, to ensure the correct context, by using .bind(this) in 
invocation. For example, if we wired up a method to setState based on en event's target value, 
we would have the following method in our constructor function:
#+BEGIN_SRC js
update(e) {
  this.setState({txt: e.target.value});
}
#+END_SRC
and this 'this' bound invocation in our jsx
#+BEGIN_SRC js
<input type="test"
  onChange={this.update.bind(this)} />
#+END_SRC

If we're going to be passing around the method, via props for ex, we might want to hard bind 
the method in the Class component's constructor method, to ensure correct future invocations. 
Ex: 
#+BEGIN_SRC js
constructor (){
  super();
  this.state = {txt:''}
  this.update = this.update.bind(this);
}
#+END_SRC

** Owner Ownee Relationship
When one component renders another component, React calles this the owner-ownee relationship. 
The parent component is called a composite component. The props of the child are set by the 
parent through attribute-like assignment:
#+BEGIN_SRC js
... 
// in parent return ()
  <Widget txt={this.state.txt} update={this.update} />
...
#+END_SRC
** Using Refs to Access Components (not encouraged)
Refs let you reference an instance of a Class component within our application. When you are 
using React components you may need to be able to access specific references to individual 
components. This is done by defining a ref. Refs won't work with SFCs.
  We can pass a ref='' property to a Class component from its parent. This allows us to 
identify that component in the DOM, using react-dom, and we can grap its value using 
  This technique is handy for using child components to update different pieces of a parent's 
state.

#+BEGIN_SRC js
  class App extends React.Component {
    constructor(){
      super();
      this.state = {
        red: 0,
        green: 0,
        blue: 0
      }
      this.update = this.update.bind(this)
    }
    update(e) {
      this.setState({
        red: ReactDOM.findDOMNode(this.refs.red).value,
        green: ReactDOM.findDOMNode(this.refs.green),
        blue: ReactDOM.findDOMNode(this.refs.blue)
      })
    }
    render() {
      return(
        <div>
          <slider ref='red' update={this.update} />
          {this.state.red}
          <br />
          <slider ref='green' update={this.update} />
          {this.state.green}
          <br />
          <slider ref='blue' update={this.update} />
          {this.state.blue}
          <br />
        </div>
      )
    }

  class Slider extends React.Component {
    render(){
      return (
        <input type='range' min='0' max='255' onChange={this.props.update} />
      )
    }
  }

#+END_SRC

*** Refs once removed
The example above works because the slider component is one component deep. If the input component were wrapped in a div, the div would bear the color ref, ad we'd have to assign another ref to the input tag inside the slider component, ex: 'refs='inp'. We would then reference the input tag as: ReactDOM.findDOMNode(this.refs.red.refs.inp).value
** Accessing Child Properties {this.props.children}
When you're building your React components, you'll probably want to access child properties of 
the markup. To get at innerHTML or nested components of another component, we can use 
this.props.children. 
  In a child component, this.props.children refers to content (strings, interpolated JS, even
other components - if any) appearing between the component's corresponding opening and closing 
tags in the parent's render markup.
** Component Lifecycle - Mounting Basics
React components have a lifecycle, and you are able to access specific phases
of that lifecycle. When a component is added or removed from the DOM, this is called mounting
or unmounting. These lifecycle events occur in a specific order, and we can hook into them.
*** componentWillMount
fires once, when the component is ready to mount
*** render
fires to mount the component, and each time the component re-renders
*** componentDidMount
fires once, after the component mounts for the first time
*** componentWillUnmount
fires once, before the component will be removed from the DOM
** Component Lifecycle - Mounting Usage
The previous lesson introduced the React component lifecycle mounting and
unmounting. In this lesson you will learn some simple uses for these hooks.
*** componentWillMount
We don't have access to the DOM, but we do have access to state and props. So we can 
maniuulate the state or props before render.
*** render
*** componentDidMount
We now have access to component in the actual DOM, so we could find the DOM node.
*** componentWillUnmount
We can clean up any processes we have running during the life of the component. Ex. if we 
set up a setInterval in componentDidMount, we could clear the interval in 
componentWillUnmount.
** Component Lifecycle - Updating
The React component lifecycle will allow you to update your components at runtime. 
*** componentWillReceiveProps(nextProps)
This method fires before a component is re-rendered with new props., and receives as an 
argument, the next props that the component will receive. This might occur because an update 
method might make the call to ReactDOM.render, and pass an expression as props
EX:
#+BEGIN_SRC js
  update(){
    ReactDOM.render(
      <app val={this.props.val + 1} />, document.getElementById('app')
    );
  }
#+END_SRC

In the body of the componentWillReceiveProps, the previous props are still available as 
this.props, thus, the current and future props can be compared. EX:
#+BEGIN_SRC js
  componentWillReceiveProps(nextProps){
    this.setState({increasing: nextProps.val > this.props.val})
  }
#+END_SRC

*** shouldComponentUpdate(nextProps, nextState)
This method lets us determine whether the component should re-render by returning true or 
false. Ex:
#+BEGIN_SRC js
  shouldComponentUpdate(nextProps, nextState){
    return nextProps.val % 5 === 0;
  }
#+END_SRC

*** componentDidUpdate(prevProps, prevState)
Even if a component is prevented from updating (re-rendering) the state changes occur.
Ex:
#+BEGIN_SRC js
  componentDidUpdate(prevProps, prevState){
    console.log('prevProps', prevProps)
  }
#+END_SRC
    
** TODO Higher Order Components (replaces mixins)
** TODO Composable Components
** Dynamically Generated Components
We can map over data to generate arrays of components, and render those components as the 'innerHtml' of a component by passing it as this.props.children.
Ex: 
#+BEGIN_SRC js
  render(){
    let rows = this.state.data.map( person => {
      return <PersonRow data={person} />
    })
    return <table>
      <tbody>{rows}</tbody>
    </table>
  }
...
  const PersonRow = props => {
    return <tr>
      <td>{props.data.id}</td>
      <td>{props.data.name}</td>
    </tr>
  }
#+END_SRC

Each child in an array or iterator should have a unique "key" prop. The unique key is required amongst 
siblngs. 
 
** DONE Build a JSX Live Compiler
As a tool for future lessons, we want to have the ability to write JSX and see the output live 
in the browser. In this lesson we will use React to build our own live JSX compiler.
** DONE JSX Deep Dive
"JSX transforms from an XML-like syntax into native JavaScript. XML elements and attributes 
are transformed into function calls and objects, respectively."
** DONE Precompile JSX
The JSX Transformer library is not recommended for production use. Instead, you'll probably 
want to precompile your JSX into JavaScript.
** DONE Developer Tools

