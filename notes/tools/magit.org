* Intro to Magit https://www.youtube.com/watch?v=LDafmAJa-4w
* Rewrite git history with emacs https://www.youtube.com/watch?v=mtliRYQd0j4
** interactive rebase
*** aborting mid rebase

=r= then =a= 

*** continue...

=rr= at the end of the rebase?

*** edit commit message

=ll= to see log, then put point on commit, press ENTER to see diff. Go back to log buffer, press =r= then
=i= for interactive and then =w= for reword.

*** reorder and squash commits

Put point on oldest commit that you want to work with.

**** reorder

Press =r= then =i=. In this bufffer you can reorder commits with =M-p= and =M-n=

(The order of commits will now be flipped, with more recent commits at the bottom)

=C-c C-c= to make it happen

**** squash

Squash commits using =s=

When done press =C-c= (look in the mini buffer, revert buffer fron file?)

=y= brings you to the commit_editmsg popup, so you can rewrite the commit from the previous commit messages

=C-c C-c= to commit


*** Break open commit into multiple commits

Put point on commit you want to break open.

Press =r= then =m= to edit. Commit message not gets a =@= prepended

Do =M-x magit-reset= or just press =x= and enter =head~=

Go to magit with =C-x g= and formulate commits. (stage hunks, or lines using mark)

* TODO Howard's talk (through 8:21) https://www.youtube.com/watch?v=vQO7F2Q9DwA
** Magit popups allow you to toggle switches, options, etc. 
*** default options (C-t)
*** actions complete the popup process
*** popups
**** Commit (c)
***** commit w/o switches or options (c)
       this opens two windows, one one side, the commit message
       on the other side the diff for staged files
***** to submit commit message (C-c C-c)
**** Push (P)
**** Pull / Fetch (F)
**** Log (l l)
** Create Repository (M-x magit-init) -- git init
** Main interface (M-x magit-status) -- git status
*** Head: local branch info
*** Upstream: primary remote
*** Files can be Untracked, Unstaged, Staged
**** refresh (g)
*** When the cursor is over a particular file
**** stage file (s)
**** stage All (S)
**** discard file (k)
**** add to gitignore (i)
**** expand file contents (<tab>)
***** this lets you see the file contents
***** (<return>) on a particular line allows you to edit that file
*** Commit Popup (c c)
*** Push Popup (P P)
*** Status message ($)
*** Pull /Fetch Popup (F F)
*** log (l)
** Movement
*** next line (n)
*** previous line (p)
*** forward sibling (M-n)
*** backward sibling (M-p)
*** bury buffer (q)
** Handling merge conflicts
*** ediff message (e)
**** next (first) diff (n)
**** A or B for what you want to keep
**** Or edit C
*** rebasing
**** gerrit requires a straight history, no twigs
**** to achieve this you must rebase, which magit makes easy
**** move to parent (in log) rebase parent before twig, use i...
**** put lst commit at the top of the list...?
*** stash popup - z
**** pop puts it to staged
*** squashing commits (combine multiple commits that are unpushed)
**** r - rebase popup
**** l
**** s - squash newer commit into older commit
*** manipulate history with rebasing
**** in log, move to parent before twig happens
**** r i 
**** top is parent, newest commits at bottom
**** more new commit to bottom, so it's the latest commit
** DEMO CODE from howards magit demo repo

* TODO Howard's Blog
** Need for Rebasing http://www.howardism.org/Technical/Git/rebasing.html
** Squashing Commits http://www.howardism.org/Technical/Emacs/magit-squashing.html

