Responsive Typography : Jason Pamental (5:55)
https://github.com/jpamental/workshop-rt
https://github.com/jpamental/workshop-rt.git

* Responsive Typography: An Introduction
** Intro
*** files for course: http://github.com/jpamental/workshop-rt
** Art and Technology
*** Our canvas is fluid, we can't be sure how our content will be viewed.
** A Make-Believe Place
*** We can't make assumptions about context of use
**** screen size
**** device capabilities
**** user's concurrent activities
**** depth of user's focus
**** users purpose for visiting the site
*** Type conveys meaning and importance, anyone can recognize the new yorker from Type
*** Four Steps
1. Performance: select fonts with care, load what you need and don't block the page draw
2. Progressive: plan for failure, tunr up the loading process & fallback fonts to minimize 
   FOUT
3. Proportion: small screens demans subtle scale
4. Polish: Design is the details: OpenType & then some...
** Performance
*** Load only what you need
**** don't load all weights, styles, and variants for every font you want to use
*** FOUT: Flash of unstyled text
**** web font loader lets us style our content with css hooks for whether web fonts have loaded 
**** .wf-inactive / .wf-active
**** this css results in a blank screen during load
#+BEGIN_SRC css
body {
  font-family: "Trade Gothic", helvetica, arial;
}
#+END_SRC
**** This shows content straight away
#+BEGIN_SRC css
.wf-inactive body {
  font-family: helvetica, arial;
}
#+END_SRC
**** adjust font-size, line-height, and letter spacing to avoid render jumps when fonts load
** Progressive Enhancement
*** movement is distracting, text styling is not
** Proportion
*** Modern scale:
**** http://bit.ly/jprwt
*** dont' change body size, scale around it
*** use ems, they work everywhere
*** Measure and Sale
**** Use max-width on elements to keep text readable.
*** Dont' use loren ipsum
** Polish
*** don't forget fit and finish
*** enable OpenType enabled fonts
*** adding multi-colums to break up monotony
*** Use media queries to keep things in proportion
*** dont' leave orphans behind (single words on the last line of a p) typogrify!
** Responsive Web Typography Review
*** Adapt to screen size, network speed, & device capabilities
* Typography Basics: Anatomy, Picking, and Pairing
** What is Typography
- Be conscious of your client and project's context
- Enhance your design and amplify its message, meaning, and intent
- Use or break conventions intentionally
** Type Anatomy
*** styles and classifications

|-------------|
| serif       |
| sans-serif  |
| slab-serif  |
| monospaced  |
| display     |
| script      |
| blackletter |
| handwriting |
|-------------|

*** thick and thin
*** oval or round
*** size determines whether thin lines render elegantly
** Type Selection
*** Tone (Formal vs. Informatl)
*** History - time (period)
*** origin/ethnic relationship
*** Intended Use
*** explote font outlets, see links below
*** "type is the clothes words wear"
** Type Pairing
*** matching qualities
**** oval vs. round
**** wide vs tall
**** think vs. thin
*** Family - by Designer
*** related history (time/place)
** Know what translates
*** Type selection and pairing
*** much can be done with CSS
*** OpenType Features bring more finesse w/ easy fallback
*** Many techniques translate, but often only in spirit
** And what doesn't
*** rendering differs from browser to browser (use typecast)
*** content changes 
*** viewport changes (stay relative)
*** 
* Performance & Progressive Enhancement: Getting it On-screen, Fast
** Don't Block Page Render
*** Mobile first!
- simple, one column layout
- mediaqueries add as page loads
- noting loads unless it is needed for a particular layout
*** fonts and javascript are separate dependencies in browsers
*** don't let loading block the render or text
*** 75% of mobile users in 5 seconds
*** have fallback content in place and load enhancements afterward
** Performance is Design
*** use async loading
*** leverage web font loader to fix the unstyled part
*** FOUT: Flash of unstyled text
**** web font loader lets us style our content with css hooks for whether web fonts have loaded 
**** .wf-inactive / .wf-active
**** this css results in a blank screen during load
#+BEGIN_SRC css
body {
  font-family: "Trade Gothic", helvetica, arial;
}
#+END_SRC
**** This shows content straight away
#+BEGIN_SRC css
.wf-inactive body {
  font-family: helvetica, arial;
}
#+END_SRC
**** adjust font-size, line-height, and letter spacing to avoid render jumps when fonts load
*** Progressively Enhance
**** support for @font-face is more likely than JS
**** tune for loading process
**** include <noscript> as fallback
** Performance Progression Exercise
1. Use a CSS link to bring in a font (nest in a noscript tag)
2. Use JS to bring in fonts via google's web font loader (auto when cp from google web fonts)
   This puts .wf classes all over the place....
3. style .wf-inactive elements to 'correct', prevent lost of movement and re-wrapping when font loads
   focus on what's visible, the top of the page. Use line height, letter-spacing, font-size, margins, etc.
** Testing
Use the dev tools and toggle buttons to play around with the wf.inactive properties to 'correct' font load
movement.
** Code tl;dr
*** javscript google's web-font-loader && css link in noscript tag
*** use web font loader to correct unstyled content by element
https://github.com/typekit/webfontloader
*** see code sample and video re: toggle buttons for font and corrections
@(7:14) Exercise 1 Questions Video
* Proportion: One Size Won't Rule Them All
** A More Modern Scale for Web Typography
http://typecast.com/blog/a-more-modern-scale-for-web-typography
** Typecast RWD Seminar
http://www.typecast.com/seminars/rwd
** Preserve Meaning, Not Pizel Size
- Design is about communicating ideas & influencing bahavior
- Use scale as a starting point & tweak for specific typefaces & usage scenarios
- Much like the rgid: this is not religion, just a start
** Proportion Exercise
This is about setting up breakpoints, with media queries, to change the type scale
@(7:20) Exercise 2 Proportion
** Ems for media queries!
Use ems instead of pixels for media queries.
This gives us something that is relative to the size of the type, which scales.
The design will retain integrity even when devices report non-standard display sizes.
The base font size is set at 100% / ==16px / which is also 1em.
To query for display sizes, convert to ems by dividing by 16px.
786px in ems is 768/16 = ~ 44
* Polish: Sweating the Small Stuff
** Design is the Details
*** OpenType Features
**** Ligatures & Swashes
**** Fractions
**** Kerning
**** Painless Fallback
**** File Size Penalty (for now)
*** Finish & Finesse
**** Initial caps
**** Better Blockquotes
**** Multi-column Layouts
**** All Fall-back gracefully
*** Don't leave orphans behinds
**** Typogrify Module
http://drupal.org/project.typogrify
**** WidowTamer for JS
http://bit.ly/rt-widowtamer
** A Little Abundance is a Lot
*** background gradient instead of text-decoration underline...
*** see 
** Polish Exercise I
*** @(5:35) OpenTypeFont features
** Polish Exercise II
*** Initial Caps @(0:00) (IE8 and below)
*** Multi-column Layouts @(5:10)
*** Better Blockquotes ?
** Hypenation
enable on smaller devices when justification is employed...
* A Perfect Page: Exercise
**  Features
*** Oversize 2-level header
*** stylized subhead
*** Byline
*** Large initial cap
*** Inset Photo
*** Pull Quote
* Q&A

* Links
** typecast (good for testing)
** fonts.com
** typekit
** fontspring
** webtype
** font-deck
