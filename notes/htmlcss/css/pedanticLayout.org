Learn CSS Layout - the pedantic way 
http://book.mixu.net/css/

* 1. Box Positioning in CSS
The highest level abstraction for CSS layout is the positioning scheme. Once a positioning 
scheme has been determined, it can be further modified by specific layout modes.
  There are two aspects to layout:
  1: how the box of an element is sized and aligned, which is primarily controlled by the
     display property (and height, width, and margin)
  2: how elements within a particular parent element are positioned relative to each other
This chapter focuses on the latter: relative positioning
** Positioning Schemes
*** CSS 2.1 defined three positioning schemes:
All elements belong to the normal flow by default, unless they are specifically removed
from normal flow - typically by setting the float property or the position property.
**** Normal Flow
Consists of three formatting contexts: block, inline, and relative.
**** Floats
Which interact with normal flow and form the basis of most grid frameworks.
**** Absolute Positioning
Deals with absolute and fixed elements relative to the normal flow.
*** Formatting Contexts
Parent elements set the formatting context for their immediate child elements. Boxes in the 
normal flow belong to a formatting context, which may be block or inline, but not both 
simultaneously. Block-level boxes participate in a block formatting context. Inline-level 
boxes participate in an inline formating context.
  Blocks with a display property other than inline or block will still map to one of the 
two formatting contexts within normal flow.
  You can roughly think of the two formatting contexts in normal flow to correspond to
vertical stacking (when in a block formatting context) and horizontal stacking (when in an
inline formatting context).
**** Block Level Elements
Elements that are formatted visually as blocks. These elements occupies the entire space
of its parent element. 
  Block-level elements always start on a newline. Browsers typically display block-level 
elements with a newline both before and after the element.
  Block level elements may contain inline elements and other block-level elements. These
elements are called block container boxes.
***** Display values: 'block', 'list-item', 'table'
**** Inline Level Elements
Elements that do not form new blocks of content: the content (data or other inline elements) is distributed in lines.
  By default, inline elements fo not begin with a newline.
***** Display values: 'inline', 'inline-table', 'inline-block' 
**** Anonymous Boxes
Anonymous box generation is used to deal with two common cases.
***** where a parent element contains a mix of inline-level and block-level child elements 
in which case "anonymous block boxes" are generated
****** EX: a div containing an img and p tags
***** where the markup contains inline-level elements mixed with surrounding text 
in which case anonymous inline boxes are generated
****** Ex: a p tag containing text and an em or i tag
***** Anonymous block boxes
If a block container box has a block-level box inside it, then we force all other inner 
boxes to be block-level boxes, by wrapping any inline boxes in block-level boxes.
***** Anonymous inline boxes
If a block container element contains text that is not enclosed within an inline-level 
element, that text will be wrapped in anonymous inline boxes.
***** Summary
Anonymous box generation determines the formatting context for elements in normal flow
that have both block- and inline-level siblings, by ensuring that all inline- siblings 
are wrapped as block-level boxes, and thus are laid out relative to other boxes as if 
they were block-level boxes.
** Normal Flow Positioning
In normal flow, the boxes are laid out based on the formatting context. The two formatting 
contexts in normal flow roughly correspond to vertical stacking and horizontal stacking.
*** Normal Flow: Block Formatting
Boxes are laid out vertically, beginning at the top of a containg block, and progressing
along the left, outer edge of the containg block (even in the presence of floats).
  The vertical distance between two sibling boxes is determined by the 'margin' properties.
Vertical margins between adjacent block-level boxes in a block formatting context collapse.
*** Normal Flow: Inline Formatting
Boxes are laid out horizontally, into one or more line boxes. Line boxes are generated as
needed, with a width equal to the containing block (minus floats) and height being sufficient
for all of the boxes it contains.
  In an inline box is too large for its line box, the content will be split if possible. If
the content cannot be split (like a image or video, it will overflow the line box. 
**** Horizontal Alignment: 'text-align'
The text-align property controlls how inline-level boxes are positioned in a line box.
After the inline content has been distributed across line boxes, and if the total width
of the content is less than the width of the containing box, the text-align property
can be used to align the content with respect to the containing boxes left and right sides.
***** text-align: 'left', 'right', 'center', 'justify', 'initial', 'inherit'
**** Vertical Alignment: 'vertical-align' & 'line-height'
The vertical align property controls the vertical alignment of inline boxes within line boxes, not the vertical alignment of the line boxes themselves.
  A line box element's height is determined by two factors:
1. the height of the inline boxes contained within it
     inline box height = font height * line-height property
2. the alignment of the inline boxes contained within it.
***** line-height
line-height can be relative to the font height or absolute, in which case the font
height is not used to calculate the height of the inline box.
  line-height is not at all related to the parent element, even when specified as a %
****** line-height: 'normal', <length>, <number>, <percentage>
***** vertical-align
the alignment of the inline boxes is determined by the vertical-align property. This
property responds to two sets of values:
****** values relative to the parent's font baseline, content area, or font-defined positions
- baseline
- middle * gets wacky
- sub
- super
- text-top
- -text-bottom
- <percentage>
- <length>
****** values relative to the parent's line box (set by the vertical align of other elements)
- top
- bottom
***** RECAP
****** Inline boxes are wrapped by line boxes
****** Inline boxes have:
- a font size: which determines the size of the text glyphs
- a line height: which determines the height of the inline box
    inline box height = font height * line height
- a baseline: a position defined by the font, and on which the bottom edges of most
              glyphs are alighed (excluding q, or g, etc.)
****** Line boxes have:
- a font size: inherited from the parent
- a height: defined by the heights and alignments of inline elements in the line box
- a baseline
****** text-align determines the alignment of the inline box inside the line box
*** Normal Flow: Relative Positioning
Relatively positioned elements are positioned as normal, then offset from their normal
position  based on the top, left, bottom, and right property values.
** Float Positioning Scheme
Floated elements exhibit several special behaviors:
- Floats are taken out of the normal flow during layout, and hence they do not affect the 
  vertical positioning of block-level elements.
- Floats are aligned to either the left or right outer edge of their container.
- Floats are stacked starting from either the left or right edge, and are stacked in the order 
  they appear in markup. In other words, for right-floated boxes, the first right-floated box 
  is positioned on the right edge of the box that contains it and the second right-floated box 
  is positioned immediately left of the first box.
- Floats that would not fit horizontally are shifted downward.
- Floats can, however, affect the current and subsequent elements' inline-level content's line 
  boxes. Specifically, any current and subsequent line boxes are shortened to make space for 
  the float.
- But, floats do not affect the line boxes inside elements in normal flow that establish new 
  block formatting contexts. Instead, such elements are either placed to the side of the 
  float, or cleared by placing them below any preceding floats. (this is how grids work)
- Because floats are not in the normal flow, they do not normally affect parent height. This 
  is one reason why the "clearfix" technique was developed.
- Floats can be cleared using the clear property.
*** Float clearing
The clear property determines whether an element interacts with preceeding floats.
**** clear: 'left', 'right', 'both', 'none'
*** Two variants of 'content-based' height calculation:
1. overflow: visible
2. overflow (other) or explicitly clearning floats
*** The clearfix
A clearfix is a CSS snippet that:
- prevents floats withing the clearfixed parent element from affecting line boxes
  in other elements that follow the clearfixed element
- causes the floats within the clearfixed parent element to be taken into account when
  calculating that element's height.

There are three ways to accomplish this:

1. explicitly adding an element with clear: both at the end of the parent
2. adding an element with clear: both using pseudo-elements at the end of the parent
#+BEGIN_SRC css

.clearfix:after {
  content: "";
  display: table;
  clear: both;
}

#+END_SRC
3. making the parent element establish a new formatting context using a property such as 
  overflow: hidden or overflow: auto, We can use the :after property to add content to the
  end of a .clearfix element
#+BEGIN_SRC css
.clearfix {
  overflow: auto;
}
#+END_SRC

The most commonly used option is the second, because the third can cause scrollbar
creation on overflow.
** Absolute / Fixed Positioning Scheme
Boxes are positioned in terms of an absolute offset with respect to the containing block.
Absolutely positioned elements are ignored for purposes of calculating normal flow
positioning, and do not interact with sibling floating elements. 
  Fixed positioning is relative to the viewport
  Absolute positioning is relative to the containing block
The position of these boxes is based on the width, height, top, left, bottom, and right properties. 
*** position: 'absolute', 'fixed'
** In Practice
*** The display property (block, inline, flex, ...):
Specifies the type of rendering box useed for an element.
This property is not inherited by an elements children.
*** The position property (relative, absolute, fixed, ...): 
Chooses alternate rules for positioning elements.
*** Three Positioning Schemes:
1. Normal Flow (block, inline, relative)
2. Floats
3. Absolute Positioning (Fixed & Absolute)
*** Normal Flow Positioning Scheme
In normal flow, the boxes are laid out based on the formatting context. The two main 
formatting contexts in normal flow roughly correspond to vertical stacking (block) and 
horizontal (inline) stacking.
*** How to determine the formatting context for an element's children (in normal flow):
If any of the children are block-level elements, block formatting context applies.
*** Anonymous Box Wrappers:
- If a parent contains a block-level element, any inline level elements will be wrapped
  in block container boxes.
- If a parent contains text and inline-level elements, the text is wrapped in an anonymous
  inline box.
*** Block Formatting
Boxes are laid out vertically, beginning at the top of a containg block, and progressing
along the left, outer edge of the containg block (even in the presence of floats).
*** Inline Formatting
Boxes are laid out horizontally, into one or more line boxes. Line boxes are generated as
needed, with a width equal to the containing block (minus floats) and height being sufficient
for all of the boxes it contains.
**** Horizontal Alignment = text-align property ('left', 'right', 'center', ...)
**** Vertical Alignment = vertical-align property (relative to parent properties)
**** Inline box height = font size * line height
*** Relative Formatting
Relatively positioned elements are positioned as normal, then offset from their normal
position  based on the top, left, bottom, and right property values.
*** Floats
The float CSS property specifies that an element should be taken from the normal flow and 
placed along the left or right side of its container, where text and inline elements will 
wrap around it.
*** Clearfix
#+BEGIN_SRC css

.clearfix:after {
  content: "";
  display: table;
  clear: both;
}

#+END_SRC
*** overflow property
The overflow property specifies whether to clip content, render scrollbars or just display 
content when it overflows its block level container.
  Using the overflow property with a value different to visible (its default) will create a 
new block formatting context. This is technically necessary — if a float intersected with 
the scrolling element it would forcibly rewrap the content. The rewrap would happen after 
each scroll step, leading to a slow scrolling experience.
  In order for the overflow property to have an effect, the block level container must 
either have a bounding height (height or max-height) or have white-space set to nowrap.

#+BEGIN_SRC css

/* Content is not clipped */
overflow: visible;

/* Content is clipped, with no scrollbars */
overflow: hidden;

/* Content is clipped, with scrollbars */
overflow: scroll;

/* Let the browser decide */
overflow: auto;

#+END_SRC

* 2. Box Sizing in CSS
The CSS box model is the basic sructure that defines the components of a box in CSS.
The sizing of boxes is related to the box model, but it is strongly influenced by the
positioning scheme used. Each box has several parts:

| a margin | a border | padding | the content width/height |

** Padding and Borders
The padding and border properties produce padding around the content-box, and a border 
surrounding any padding and the content-box.
  On inline elements (but not inline-block), the left and right borders are only drawn once, 
rather than being drawn for each line box. Also, the top and bottom borders do not affect 
vertical layout.
** Content and Margins
The mechanism by which content dimensions (width/height) and automatic margins (auto) are
calculated differ based on whether a box is inline, block, floated, or absolutely positioned.
In addition, 'display: inline-block' boxes have special behavior. The table below summarizes
the methods used to calcualte values when width, height, or margin-* is set to 'auto'.

|--------------+---------------+------------------+--------------+--------------|
| Box Type     | Height        | Width            | Margin (L/R) | Margin (T/B) |
|--------------+---------------+------------------+--------------+--------------|
| Inline       | N/A           | N/A              | auto -> 0    | N/A          |
|--------------+---------------+------------------+--------------+--------------|
| Block        | auto ->       | auto ->          | auto ->      | auto -> 0    |
|              | content-based | constraint-based | center       |              |
|--------------+---------------+------------------+--------------+--------------|
| Float        | auto ->       | auto ->          | auto -> 0    | auto -> 0    |
|              | content-based | shrink-to-fit    |              |              |
|--------------+---------------+------------------+--------------+--------------|
| Inline-Block | auto ->       | auto ->          | auto -> 0    | auto -> 0    |
|              | content-based | shrink-to-fit    |              |              |
|--------------+---------------+------------------+--------------+--------------|
| Absolute     | special       | special          | special      | special      |
|--------------+---------------+------------------+--------------+--------------|

*** Box Model Calculations for Inline Elements
Width and Height are ignored, and are set by the text content dimensions. Remember that
inline-level elements are positioned by placing them on line boxes, that have a height
based on 'font-size' and 'line-height'.
  Margin 'top' & 'bottom' are also ignored.
But, margin 'right' & 'left' do work. 'auto' => 0
*** "Content-Based" Height for Blocks, Floats, and Inline-Blocks
- When 'height: auto' && 'overflow: visible', these blocks will have a height sufficient to
  account for all non-floating children.
- When 'height: auto" && 'overflow: !visible', these blocks will always expand to fit their 
  content.
Both of those calculations attempt to set the height of the element to account for the 
contents, but the algorithm used for block-level elements when overflow: visible ignores 
floating descendants. This is the reason why, by default, a block-level box with only 
floating descendants has a height of 0 since visible is the default value for overflow.
*** Width Calculations
**** Block-Level Elements (Constraint-Based)
When 'width: auto', the box always expands to use the full width of the parent element.
When width is set, and 'margin's are auto, center the box.

Otherwise, 'auto' values are calculated from the constrainct-based-equation:

      margin-left + width + margin-right = width of containing block

**** Floating Blocks and Inline-Block Elements (Shrink-To-Fit)
The width value is set to:
1. the preferred width (e.g. using as few line breaks as possible) if horizontal space is 
   available, otherwise
2. the width is set to the preferred minimum width (e.g. using as many line breaks as 
   possible), and in the worst case to
3. the available width with some potential overflow.

'margin: auto' is always interpreted as margin: 0 for floating blocks and inline-block
elements.

*** Margins for Floating Blocks and Inline-Block Elements (auto -> 0)
*** Absolutely Positioned, Non-Replaced Elements
If the content dimensions are unspecified, they are calculated using the shrink-to-fit (for width) / content-based (for height) algorithm before attempting to fill in the rest of the values through the constraints specified by the box model
* 3. Additional properties that influence positioning
** Margin Collapsing
When there are two adjacent vertical margins, the greater of the two is used, and the other is ignored.
*** Four Rules
1. Only vertical margins can collapse - horizontal margins never collapse.
2. Only margins from block level elements can collapse.
3. Only margins from boxes that participate in the same block formatting context can collapse. Note
   that block formatting contexts are not established by block boxes with 'overflow: visible' (default).
4. Only margins that are considered to be adjoining can collapse.
*** Defining Adjoining
The notion of adjointness is explained in a roundabout way in the spec, but I found it easiest to think 
about the margin-top and margin-bottom values as rectangles on their own - ignoring the box that generates 
them - and then looking at whether those margin rectangles touch each other.
  If you think of the margins as boxes on their own, then you can see that two margins will be next to each 
other when they are:
 - parent and child margins
 - margins between siblings
 - grandparent and parent and child margins
 - margins from elements with no content
  All of these cases are eligible for margin collapsing. Two margins will only collapse if they are not 
separated by:
- content (e.g. text in line boxes)
- padding or borders (e.g. if a parent has padding or borders, its margins cannot collapse with the margins 
  of its children but otherwise they will)
- clearance (e.g. the result of clearing a float may separate the margins enough that they cannot collapse.)
*** Working with Negative Margins
When two or more margins collapse, the resulting margin width is the maximum of the collapsing margins' 
widths. In the case of negative margins, the maximum of the absolute values of the negative adjoining 
margins is deducted from the maximum of the positive adjoining margins. If there are no positive margins, 
the maximum of the absolute values of the adjoining margins is deducted from zero.

** Negative Margins (avoid)
*** from spec
In the case of negative margins, the maximum of the absolute values of the negative adjoining margins is 
deducted from the maximum of the positive adjoining margins. If there are no positive margins, the maximum 
of the absolute values of the adjoining margins is deducted from zero.
** Overflow
When child elements (often content) do not fit inside of, or are positioned outside of, their parent element, the overflow property controls how the portion of the child element that overflows is rendered.
*** Applying an overflow value other than visible creates a block formatting context.
*** overflow values
- visible: This value indicates that content is not clipped, i.e., it may be rendered outside the block box.
- hidden: This value indicates that the content is clipped and that no scrolling user interface should be 
  provided to view the content outside the clipping region.
- scroll: This value indicates that the content is clipped and that if the user agent uses a scrolling 
  mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be 
  displayed for a box whether or not any of its content is clipped. This avoids any problem with scrollbars 
  appearing and disappearing in a dynamic environment. When this value is specified and the target medium 
  is 'print', overflowing content may be printed.
- auto: The behavior of the 'auto' value is user agent-dependent, but should cause a scrolling mechanism to 
  be provided for overflowing boxes.
** max/min-width/height
Values for these properties can be specified with explicit units, like px, or as a percentage of the parent
element's width or height (which must be set as a definite value)
** Pseudo Elements
** Stacking Contexts and Rendering Order
* 4. Flexbox
** Flexbox Properties
*** display: flex and anonymous box generation
*** flex-container: main and cross axis
*** flex-container: flex lines
*** Flex items: flex item sizing
*** flex-basis
*** dividing flex items onto flex lines
*** resizing the flex items on each flex line
*** calculations for flex-grow
*** calculations for flex-shrink
*** flex line & flex item alignment
*** main axis alignment: justify-content
*** cross-axis alignment for flex lines: align-content
*** cross-axis alignment for flex-items: align-items, align-self
*** order
*** misc.
*** centering with flexbox
*** using margin: auto with flexbox
*** using min-* max-* with flexbox
* 5. CSS layout - tips and layout techniques
