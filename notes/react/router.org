

* Getting Started with React Router - Joe Maddalone
** Router, Route, and Link Components
*** Router
The router component is the parent-most component in our app.
*** Route
Route components nest inside the Router component. Routes take a 'path' and a 'component' 
prop. The path is the url path at which the specified component will render. 
*** Link
Operates like an anchor tag, instead of an href we use a 'to' prop. 
*** Source:

#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Link, hashHistory} from 'react-router';

const Home = () => <div><h1>Home</h1><Links /></div>;
const About = () => <div><h1>About</h1><Links /></div>;
const Contact = () => <div><h1>Contact</h1><Links /></div>;

const Links = () => 
  <nav>
    <Link to="/">Home</Link>
    <Link to="/about">About</Link>
    <Link to="/contact">Contact</Link>
</nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/" component={Home}></Route>
        <Route path="/about" component={About}></Route>
        <Route path="/contact" component={Contact}></Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC
** hashHistory vs. browserHistory
hashHistory is convienent for development, but for production, it's best to use browserHistory 
to avoid the uglyurl strings generated by hashHistory. In order to use browserHistory, we need 
to instruct our server to return our application at any route. For example, in a node/express 
server, we would serve index.html whenever a route is called. react-router will handle the rest 
for us.
** activeStyle & activeClassName
The 'activeStyle' prop allows us to style our link differently when it is the current route.
activeStyle works just like the 'style' prop:
#+BEGIN_SRC js
  <Link activeStyle={{color: 'green'}} to="/">Home</Link>
#+END_SRC

The activeClassName works similarly:
#+BEGIN_SRC js
  <Link activeClassName="active" to="/">Home</Link>
#+END_SRC

** Nested Routes
When we want to create nested routes, it's as simple as nesting the Route components within 
the Router component, rendering each nested Route's component as 'props.children' in the parent Route's component, and matching our Link component's path.  

*** Source

#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Link, hashHistory} from 'react-router';

const Home = () => <div><h1>Home</h1><Links />{props.children}</div>;
const About = () => <div><h1>About</h1>{props.children}</div>;
const Contact = () => <div><h1>Contact</h1></div>;

const Links = () => 
  <nav>
    <Link to="/">Home</Link>
    <Link to="/about">About</Link>
    <Link to="/about/contact">Contact</Link>
</nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/" component={Home}>
          <Route path="/about" component={About}>
            <Route path="/contact" component={Contact}></Route>
          </Route>
        </Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC
** IndexRouter
Index routes alow us to render a default component when no other route is active.
*** Source:

#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Link, IndexRoute, hashHistory} from 'react-router';

const Outer = () => <div><h1>Our Site</h1><Links />{props.children}</div>;
const About = () => <div><h1>About</h1></div>;
const Contact = () => <div><h1>Contact</h1></div>;

const Links = () => 
  <nav>
    <Link to="/">Home</Link>
    <Link to="/about">About</Link>
    <Link to="/contact">Contact</Link>
</nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/" component={Outer}>
          <IndexRoute component={About}></IndexRoute>
          <Route path="contact" component={Contact}></Route>
        </Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC

** Route Parameters
Route parameters allow us to pass in a portion of our route-url-path as a property (props.params.message) of the component that the Route Component will render. 
*** Source

#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Link, hashHistory} from 'react-router';

const Message = (props) => <div><h1>{props.params.message || Hello!}</h1><Links /></div>;

const Links = () =>
  <nav>
    <Link to="/">Hello</Link>
    <Link to="/Hi">Hi</Link>
    <Link to="/Yo">Yo</Link>
  </nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/(:message)" component={Message}></Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC

** Named Components
We can render multiple components from a single route using 'named' components. 

*** Source
#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Link, IndexRoute, hashHistory} from 'react-router';

const Home = () => <h1>Home</h1>;
const HomeBody = () => <div>this is the home body</div>;
const Other = () => <h1>Other</h1>;
const OtherBody = () => <div>this is the other body</div>;

const Container = (props) =>
  <div>{props.header}{props.body}<Links /></div>

const Links = () => 
  <nav>
    <Link to="/">Home</Link>
    <Link to="/other">Other</Link>
</nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/" component={Container}>
          <IndexRoute components={{ header: Home, body: HomeBody}}></IndexRoute>
          <Route path="/other" components={{ header: Other, body: OtherBody}}></Route>
        </Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC

** Querystring Parameters
We can pass in query strings as props (props.location.query.queryKey) to any component that will render at a specific route. Query strings follow a '?' and are key value pairs 'key=value' separated by '&'. 

*** Source
#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Link, hashHistory} from 'react-router';

const Page = (props) =>
  <div><h1>{Props.location.query.message || 'Hello'}</h1></div>

const Links = () => 
  <nav>
    <Link to={{pathname: "/", query: {message: "Yo"}}}>Yo</Link>
  </nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/" component={Page}></Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC

** Redirect
The Redirect component in react-router does exactly what it sounds like. It allows us to 
redirect from from one route to another.

*** Source
#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Redirect, Link, hashHistory} from 'react-router';

const Home = () => <div><h1>Home</h1><Links /></div>;
const About = () => <div><h1>About Us</h1><Links /></div>;
const Contact = () => <div><h1>Contact</h1><Links /></div>;

const Links = () => 
  <nav>
    <Link to="/">Home</Link>
    <Link to="/about">About</Link >
    <Link to="/about-us">About Us</Link >
    <Link to="/contact">Contact</Link>
</nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/" component={Home}></Route>
        <Route path="/about-us" component={About}></Route>
        <Redirect from='/about' to='/about-us'></Redirect>
        <Route path="/contact" component={Contact}></Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC

** TODO setRouteWillLeaveHook (come back after working with 'context' in react
setRouteWillLeaveHook provides a method for us to intercept a route change before leaving the current route.

*** Source
#+BEGIN_SRC js

import React from 'react';
import {Router, Route, Redirect, Link, hashHistory} from 'react-router';

const Home = () => <div><h1>Home</h1><Links /></div>;
const About = () => <div><h1>About Us</h1><Links /></div>;
const Contact = () => <div><h1>Contact</h1><Links /></div>;

const Links = () => 
  <nav>
    <Link to="/">Home</Link>
    <Link to="/about">About</Link >
    <Link to="/about-us">About Us</Link >
    <Link to="/contact">Contact</Link>
</nav>

class App extends React.Component {
  render(){
    return (
      <Router history={hashHistory}>
        <Route path="/" component={Home}></Route>
        <Route path="/about-us" component={About}></Route>
        <Redirect from='/about' to='/about-us'></Redirect>
        <Route path="/contact" component={Contact}></Route>
      </Router>
    )
  }
}

export default App;

#+END_SRC
