ACTION

* TODO list
** Soil Test App : Design Recipe
** FreeCodeCamp : React Recipe Box


* queue
** Notes
*** Udemy : Modern React with Redux
*** JavaScript Allonge : Review and Refactor Portfolio
*** Online Courses
**** Pluralsight 
    - [ ] Building Applications with React and Flux : Cory House (5:08)
    - [ ] Building Applications with React and Redux in ES6: Cory House (6:14)
    - [ ] Build Cross Platform React Native Apps with Exponent and Redux : Hendrick(3:21)
    - [ ] Building a Full-Stack App with React and Express : Daniel Stern (3:24)
    -  [ ] Docker Deep Dive : Nigel Poulton (5:38)
**** Udemy
    - [ ] Hardcore Functional Programming in JavaScript : Brian Lonsdorf (6:00)
    - [ ] Build Apps with React Native : Stephen Grider (8:00+)
    - [ ] Build Web Apps with ReactJS and Flux : Stephen Grider (9:30+)
    - [ ] Build Apps with React Native : Stephen Grider (8:00+)
    - [ ] Advanced React and Redux
    - [ ] Learn & Understand Node.js Anthony (12:00+)
**** FrontEnd Masters
    - [ ] API Design with Node.js using Express : Scott Moss (10:18)
    - [ ] Organizing Javascript Functionality : Kyle Simpson (5:11)
    - [ ] Functional-Lite JS : Kyle Simpson (3:10)
    - [ ] Rethinking Async JS : Kyle Simpson (6:22)
    - [ ] Asynchronous Programming in Javascript : Jafar Husain (9:36)
**** Egghead IO
    - [X] React Fundamentals : Joe Maddalon
    - [ ] Build Your First React.js App : Tyler McGinnise
    - [ ] Getting Started with Redux : Dan Abramov
    - [ ] React Native Fundamentals : Tyler McGinnis
    - [ ] Regex in JavaScript : Joe Maddalone
    - [ ] Asynchronous Programming: The End of the Loop : Jafar Husain
    - [ ] JavaScript Arrays in Depth : Shane Osbourne
    - [ ] Learn how to use Immutable JS : J.S. Leonard
*** react
**** React Fundamentals (Egghead)
**** Getting Started with Redux (egghead)
**** Getting Started with React Router (egghead)
** Projects
** Complete Mongo Certification
 
* App Ideas
** Soil Test
** Ship's Log (searchable note taker) 
*** dates
*** string parsing
*** relational db?
** SNAP
** Index Cards
*** datomic


* Horizon
** Scheme
*** Little Schemer / Seasoned Schemer
*** HtDP [5/43]
    I. Processing Simple Forms of Data
 - [X] Students, Teachers, Computers
 - [X] Numbers, Expressions, Simple Programs
 - [X] Programs are Function Plus Variable Definitions
 - [X] Conditional Expressions and Functions
 - [X] Symbolic Information
 - [ ] Compound Data, Part 1: Structures
 - [ ] The Varieties of Data
 - [ ] Intermezzo 1: Syntax and Semantics
 II. Processing Arbitrarily Large Data
 - [ ] Compound Data, Part 2: Lists
 - [ ] More on Processing Lists
 - [ ] Natural Numbers
 - [ ] Composing Functions, Revisited Again
 - [ ] Intermezzo 2: List Abbreviations
 III. More on Processing Arbitrarily Large Data
 - [ ] More Self-referential Data Definitions
 - [ ] Mutually Referential data Definitions
 - [ ] Development through Iterative Refinement
 - [ ] Processing Two Complex Pieces of Data
 - [ ] Intermezzo 3: Local Definitions and Lexical Scope
 IV. Abstracting Designs
 - [ ] Similarities in Definitions
 - [ ] Functions as Values
 - [ ] Designing Abstractions from Examples
 - [ ] Designing Abstractions with First-Class Functions
 - [ ] Mathematical Examples
 - [ ] Intermezzo 4: Defining Functions on the Fly
 V. Generative Recursion
 - [ ] A New Form of Recursion
 - [ ] Designing Algorithms
 - [ ] Variations on a Theme
 - [ ] Algorithms that Backtrack
 - [ ] Intermezzo 5: The Cost of Computing and Vectors
 VI. Accumulating Knowledge
 - [ ] The Loss of Knowledge
 - [ ] Designing Accumulator-Style Functions
 - [ ] More Uses of Accumulation
 - [ ] Intermezzo 6: The Nature of Inexact Numbers
 VII. Changing the State of Variables
 - [ ] Memory for Functions
 - [ ] Assignment to Variables
 - [ ] Designating Functions with Memory
 - [ ] Examples of Memory Usage
 - [ ] Intermezzo 7: The Final Syntax and Semantics
 VIII.
 - [ ] Encapsulation
 - [ ] Mutable Structures
 - [ ] Designing Functions that Change Structures
 - [ ] Equality
 - [ ] Changing Structures, Vectors, and Objects
 Epilogue

*** SICP
** Clojure
*** Living Clojure
*** Clojure for the Brave and True
*** Clojure Applied
** Secondary Languages
*** Java
*** Elm
*** Elixir
*** Rust
** MIT OpenCourseware
*** 6.01   - Intro to EE and CompSci
*** 18.01  - Single Variable Calculus
*** 6.042  - Mathematics for Computer Science
*** 6.006  - Intro to Algorithms
*** 18.02  - MultiVariable Calculus
*** 6.046  - Algorithms
*** 18.310 - Principles of Discrete Applied Math
    
