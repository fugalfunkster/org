ACTION

* Ready or Nearly So 
  
** todolist [0/3]
*** learning tooling
**** TODO magit
***** branching and merging
**** TODO docker
***** docker.el?
***** dockerfile.mode
*** JavaScript Allonge 
**** TODO Review First Third
*** YDKJS 
**** TODO Types and Grammar - Ch. 5 Grammar
*** JavaScript on the High Seas
**** TODO Outline
**** TODO Intro
**** TODO Syntax
*** TODO Wrap-Up Udemy Node Course
*** TODO Refactor Full-Stack Apps
*** TODO Pluralsight Courses
    - [ ] Intro to Mongoose
    - [ ] Securing your Apps with Passport
    - [ ] Intro to Node
    - [ ] Building Web Apps w/ Node
    - [ ] Tools for REST APIs
    - [ ] Meet the Command Line
    - [ ] Chrome Dev. Tools


** queue
*** JavaScript Allonge
*** Memoize HTML/CSS/DOM basics
*** Write a little library
*** YDKJS
*** Write JavaScript on the High Seas
**** Intro
**** Syntax
**** Grammar
**** Types
**** Functions
**** Arrays
**** POJOs
*** Start FreeCodeCamp React Challenges
*** Online Courses
**** Pluralsight 
***** Misc
     - [X] Git Fundamentals : James Kovacs (1:52)
     - [X] Meet Emacs : Phil Hagelberg (0:58)
     - [ ] Using the Chrome Developer Tools : John Sonmez (2:50)
     - [ ] Meet the Command Line : Dan Benjamin (1:53)
***** JS
     - [X] Advanced JavaScript : Kyle Simpson (6:54)
     - [X] JavaScript Objects and Prototypes : Jim Cooper (0:48)
     - [ ] Practical Design Patterns in JavaScript : Jonathan Mills (3:10)
     - [ ] jQuery-free JavaScript : Elijah Manor (2:26)
     - [ ] Creating JS Modules with Browserify : Jeff Valore (1:13)
     - [X] JS.Next: ES6 : Aaron Frost (5:29)
     - [ ] Babel: Get Started : Craig McKeachie (2:03)
***** Node / Express / Mongo
     - [X] Real Time Web with Node.js : Kyle Simpson (5:23)
     - [X] Intro to NPM as a Build Tool : Marcus Hammarberg (1:37)
     - [ ] Intro to Node.js : Paul O'Fallon (2:48)
     - [ ] Building Web Apps with Node.js : Kevin Whinnery (3:43)
     - [X] RESTful Web Services with Node.js and Express : Jonathan Mills (2:04)
     - [ ] Securing Your Application with OAuth and Passport (2:23)
     - [ ] Five Essential Tools for REST APIs : Elton Stoneman (2:56)
     - [X] Building Web Apps with Node and Express 4.0 : Jonathan Mills (4:43)
     - [X] Intro to Mongoose for Node.js and MongoDB : Mark Scott (1:41)
     - [ ] JavaScript Templating With Handlebars : Ryan Lewis (2:19)
***** React
     - [ ] React.js: Getting Started : Samer Buna (1:29)
     - [ ] Building Applications with React and Flux : Cory House (5:08)
***** HTML / CSS
     - [ ] Intro to HTML5 and CSS3 : Christopher Schmitt (2:53)
     - [ ] HTML Forms : Matt Milner (2:04)
     - [ ] HTML5 Advanced Topics : Craig Shoemaker (2:45)
     - [ ] CSS3 In-Depth : Estelle Weyl (6:15)
     - [ ] Responsive Websites with Bootstrap 3 : Mark Zamoyta (2:53)
     - [ ] D3.js Data Visualization Fundamentals : Ben Sullins (4:35)
***** CompSci
     - [ ] Algorhithms and Data Scrictures I. : Robert Horvick (3:13)
     - [ ] Algorhithms and Data Scrictures II. : Robert Horvick (2:30)
**** Udemy
     - [X] JavaScript the Wierd Parts : Anthony (11:30+)
     - [ ] Learn & Understand Node.js Anthony (12:00+)
     - [ ] Hardcore Functional Programming in JavaScript : Brian Lonsdorf (6:00)
     - [ ] Build Apps with React Native : Stephen Grider (8:00+)
     - [ ] Build Web Apps with ReactJS and Flux : Stephen Grider (9:30+)
**** FrontEnd Masters
***** Node
     - [ ] API Design with Node.js using Express : Scott Moss (10:18)
     - [ ] Meteor : Chris Mather (10:03)
***** D3
     - [ ] Interactive Data Visualization with D3.js : Ian Johnson (5:31)
***** JS 
     - [ ] Organizing Javascript Functionality : Kyle Simpson (5:11)
     - [ ] Coercion in Javascript : Kyle Simpson (3:20)
     - [ ] Functional-Lite JS : Kyle Simpson (3:10)
***** RxJS
     - [ ] Asynchronous Programming in Javascript : Jafar Husain (9:36)
**** Egghead Io
***** React
  - [ ] Build Your First React.js App : Tyler McGinnis
  - [ ] Getting Started with Redux : Dan Abramov
  - [ ] React Fundamentals : Joe Maddalone
  - [ ] React Native Fundamentals : Tyler McGinnis
***** D3
  - [ ] Intro to D3 : Ben Clinkinbeard
***** JavaScript
  - [ ] Regex in JavaScript : Joe Maddalone
***** Functional JS
  - [ ] Asynchronous Programming: The End of the Loop : Jafar Husain
  - [ ] JavaScript Arrays in Depth : Shane Osbourne
  - [ ] Learn how to use Immutable JS : J.S. Leonard
  - [ ] Reduce Data with JavaScript Array#reduce : Myokola Bilokon
***** Reactive Programming
  - [ ] Introduction to Reactive Programming : Andre Staltz
  - [ ] Step-by-Step Async JavaScript with RxJS : John Lindquist
  - [ ] Cycle.js Fundamentals : Andre Staltz
*** Complete Mongo Certification






* Memoize
** Express
*** Big Ideas in Express
- Module Patterns
- Express Modules
  - app.listen
  - app.use
  - app.set
  - app.http
  - express.Router()
  - express.static()
  - app.param
- Router
  - router.all
  - router.method
  - router.route
  - router.use
  - req.params
- custom middleware
- MVC 
- Controllers
- sessions
** Passport
- passport-local
- passport-git
- passport-facebook
** MongoDB and Mongoose
- objectID (require?
** Node
*** NPM
- versioning (^/~/ /etc.)
- package.json / scripts / "start"
*** Node Modules
- http
- xml2js
- flash (connect-flash)
- morgan?
- crypto
- parsers
  - bodyparser
    - cookieparser 


* Pedagogicus
** Principles
*** Compositional Logic
*** Functional Programming
*** Algorhithm Design
*** Data Structures
*** Object Oriented Programming

** Languages
*** JavaScript
**** Types and Control Flow
***** primitives
***** value vs. reference
***** Type Coercion
***** box wrappers
**** First Class Functions
***** Closures
***** Lexical Scope
***** Modularity
**** Data Structures: Arrays, POJOs, and JSON
***** this
***** iteration
***** map, reduce, filter, fold
**** Advanced Syntax
***** arrow functions
**** OLOO (Objects Linked to Other Objects)
**** Dom Manipulation
**** Async
***** Callbacks
***** Promises and Generators
***** Reactive Programming and Observables
   - http://reactivex.io/learnrx/
   - https://gist.github.com/staltz/868e7e9bc2a7b8c1f754
   - https://medium.com/@puppybits/rxjs-is-great-so-why-have-i-moved-on-534c513e7af3#.bsgoy4rdg
**** ES2015
*** Scheme
**** Programming to Abstractions
**** Design Process
**** Recursion
*** Clojure
**** Immutability
**** Async / concurrent / parralel

** Technology Stacks
*** Front End
**** HTML5
**** CSS3
**** SASS
**** JS Dom Manip.
**** JQuery
*** Frameworks
**** React
**** Falcor
**** om
*** JS Back End
**** Node
**** Express
**** MongoDB & Mongoose
**** Passport
*** Clojure
**** Clojure
**** ClojureScript
**** Figwheel
**** Om Next
**** React


* Horizons
** Three Months of Healthy Fun
*** Cooking
**** Salads
**** Soups
**** Summer Vegetables
**** Meats
**** Fruits
**** Carbs
*** Exercise and Massage
**** Yard Projects
**** Cardio
**** Massage
*** Computer Science
**** Apps
***** Soil Test
***** Index Cards
***** SNAP
**** Scheme
***** Little Schemer / Seasoned Schemer
***** HtDP [5/43]
     I. Processing Simple Forms of Data
  - [X] Students, Teachers, Computers
  - [X] Numbers, Expressions, Simple Programs
  - [X] Programs are Function Plus Variable Definitions
  - [X] Conditional Expressions and Functions
  - [X] Symbolic Information
  - [ ] Compound Data, Part 1: Structures
  - [ ] The Varieties of Data
  - [ ] Intermezzo 1: Syntax and Semantics
  II. Processing Arbitrarily Large Data
  - [ ] Compound Data, Part 2: Lists
  - [ ] More on Processing Lists
  - [ ] Natural Numbers
  - [ ] Composing Functions, Revisited Again
  - [ ] Intermezzo 2: List Abbreviations
  III. More on Processing Arbitrarily Large Data
  - [ ] More Self-referential Data Definitions
  - [ ] Mutually Referential data Definitions
  - [ ] Development through Iterative Refinement
  - [ ] Processing Two Complex Pieces of Data
  - [ ] Intermezzo 3: Local Definitions and Lexical Scope
  IV. Abstracting Designs
  - [ ] Similarities in Definitions
  - [ ] Functions as Values
  - [ ] Designing Abstractions from Examples
  - [ ] Designing Abstractions with First-Class Functions
  - [ ] Mathematical Examples
  - [ ] Intermezzo 4: Defining Functions on the Fly
  V. Generative Recursion
  - [ ] A New Form of Recursion
  - [ ] Designing Algorithms
  - [ ] Variations on a Theme
  - [ ] Algorithms that Backtrack
  - [ ] Intermezzo 5: The Cost of Computing and Vectors
  VI. Accumulating Knowledge
  - [ ] The Loss of Knowledge
  - [ ] Designing Accumulator-Style Functions
  - [ ] More Uses of Accumulation
  - [ ] Intermezzo 6: The Nature of Inexact Numbers
  VII. Changing the State of Variables
  - [ ] Memory for Functions
  - [ ] Assignment to Variables
  - [ ] Designating Functions with Memory
  - [ ] Examples of Memory Usage
  - [ ] Intermezzo 7: The Final Syntax and Semantics
  VIII.
  - [ ] Encapsulation
  - [ ] Mutable Structures
  - [ ] Designing Functions that Change Structures
  - [ ] Equality
  - [ ] Changing Structures, Vectors, and Objects
  Epilogue

***** SICP

**** CompSci
***** 6.01   - Intro to EE and CompSci
***** 18.01  - Single Variable Calculus
***** 6.042  - Mathematics for Computer Science
***** 6.006  - Intro to Algorithms
***** 18.02  - MultiVariable Calculus
***** 6.046  - Algorithms
***** 18.310 - Principles of Discrete Applied Math

**** Clojure
***** Living Clojure
***** Clojure for the Brave and True
*** Nebraska Trip
*** Seattle Trip
    
