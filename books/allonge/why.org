fugalfunkster's guide to the Y combinator

* What is a combinator?
  
**** Technical Definition
    
     "A combinator is a higher-order function that uses only function application
     and earlier defined combinators to define a result from its arguments"

     -- https://en.wikipedia.org/wiki/Combinatory_logic


**** Looser Definition

     Combinators are higher-order pure functions.
     Combinators accept functions as arguments.
     Combinators return a function.
     

* The Y combinator:

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

  const Y = (f) =>
  ( x => f(v => x(x)(v)) )
  ( x => f(v => x(x)(v)) );

#+END_SRC


* An example of its use:

  We can pass the Y combinator a function to compute the nth factorial.
  Note that our factorial function returns a function that returns a ternary
  expression, a control flow operator used for linear recursion.

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

  const Y = (f) =>
  ( x => f(v => x(x)(v)) )
  ( x => f(v => x(x)(v)) );

  const factorial = Y(function (fac) { 
    return function (n) {
      return (n == 0 ? 1 : n * fac(n - 1)); }
    });

  console.log(factorial(5));

#+END_SRC

#+RESULTS:
: 120

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

function fac (n) { 
  return n === 0 ? 1 : n * fac(n - 1);
}

console.log(fac(5));
#+END_SRC

#+RESULTS:
: 120


* Substutition

** begin

 #+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

   const Y = (f) =>
   ( x => f(v => x(x)(v)) )
   ( x => f(v => x(x)(v)) );

   const factorial = Y(function (fac) { 
     return function (n) {
       return (n == 0 ? 1 : n * fac(n - 1)); }
     });

   console.log(factorial(5));

 #+END_SRC

 #+RESULTS:
 : 120


** TODO Substitute the function body for the function call within the console.log statement

 #+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output :tangle yes

   // Let the substitution begin!
   // First I'll substitute function where its called.

   const Y = (f) =>
   ( x => f(v => x(x)(v)) )
   ( x => f(v => x(x)(v)) );

   console.log((Y(function (fac) {
     return function (n) {
       return (n == 0 ? 1 : n * fac(n - 1)); }
     }))(5));

 #+END_SRC

 #+RESULTS:
 : 120


** Substitute in the Y combinator

 #+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output
  
   console.log((((f) =>
     ( x => f(v => x(x)(v)) )
     ( x => f(v => x(x)(v)) ))
    (function (fac) {
     return function (n) {
       return (n == 0 ? 1 : n * fac(n - 1)); }
     }))(5));

 #+END_SRC

 #+RESULTS:
 : 120


** Pass the factorial function into the combinator:

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

   console.log((( x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
                ( x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); }))(5));
   
#+END_SRC

#+RESULTS:
: 120


** Substitute X for X : ternary time

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

  console.log((n => { 
                return (
                  n == 0
                    ? 1 
                    : n * (v => (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
                                (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })(v)
                          )(n - 1)
                ); 
               })(5));

#+END_SRC

#+RESULTS:
: 120


** Building Up and back to the begin:

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

  console.log(
    (5 * (v => (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
               (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })(v)
         )(4))
  );

#+END_SRC

#+RESULTS:
: 120

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

  console.log(
    (5 * ((x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
          (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })(4)))
  );

#+END_SRC

#+RESULTS:
: 120


** Ternary time:

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output
 
   (5 * (n => {
          return (
            n == 0
              ? 1
              : n * (v => (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
                          (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
                          (v)
                    )(n - 1)
          );
        })(4));

#+END_SRC

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

   // 4 !== 0
   // Again! Again!

   (5 * 4 * (v => (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
                  (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })(v)
            )(3));

#+END_SRC


** Recursion revealed:

#+BEGIN_SRC js :cmd "org-babel-node --presets es2015" :results output

  console.log(
    (5 * 4 * ((x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })
              (x => n => { return (n == 0 ? 1 : n * (v => x(x)(v))(n - 1)); })(3)))
  );

#+END_SRC

#+RESULTS:
: 120



* What I learned

  - Anything you can compute, you can compute with functions.
  - The ternary operator controls the flow of the recursive process.
  - The final return is an evaluation of prior calls to the factorial function.


