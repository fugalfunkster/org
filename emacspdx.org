* Org Mode Meetup
** Literate Programming
*** each code block has a typical syntax
#+BEGIN_SRC 
 CODE GOES HERE!
#+END_SRC
***  an example:
**** genetare a block with '<s TAB
**** type C-c C-c to execute the code block at cursor
**** C- ' (apostrophe) to edit the block in your mode, then repeat to jump back in

#+BEGIN_SRC emacs-lisp
(directory-files ".")
#+END_SRC

#+RESULTS:
| . | .. | .DS_Store | .git | action.org | meetup.org | node_modules | notes.org | npm-debug.log | package.json | 

*** moving around
**** you can jump to the next block with C-c M-f and back C-c M-b
**** check repo for .el mods !!!!!!!!!!
** Most languages are supported
**** shell example
#+BEGIN_SRC sh
ls -l
#+END_SRC

#+RESULTS:
| total      | 152 |               |       |       |     |    |       |               |
| -rw-r--r-- |   1 | fugalfunkster | staff |  8482 | Mar | 14 | 22:58 | action.org    |
| -rw-r--r-- |   1 | fugalfunkster | staff |    19 | Mar | 16 | 18:57 | meetup.org    |
| drwxr-xr-x | 287 | fugalfunkster | staff |  9758 | Mar | 16 | 08:42 | node_modules  |
| -rw-r--r-- |   1 | fugalfunkster | staff | 51414 | Mar | 16 | 09:25 | notes.org     |
| -rw-r--r-- |   1 | fugalfunkster | staff |  1463 | Mar | 16 | 09:04 | npm-debug.log |
| -rw-r--r-- |   1 | fugalfunkster | staff |   801 | Mar | 16 | 09:03 | package.json  |

**** note, I had to run M-x load-library ob-sh to get that to work

**** Ruby Example
#+BEGIN_SRC ruby
Dir.entries('.')
#+END_SRC

#+RESULTS:
| . | .. | .DS_Store | .git | action.org | meetup.org | node_modules | notes.org | npm-debug.log | package.json |

**** note also had to run M-x load-library ob-ruby
**** I also did ob-js to try later, and ob-python for this workshop

**** MOAR RUBY
**** Ruby just outputs the result of the expression, (like a lisp he said)

#+BEGIN_SRC ruby
5* 3
#+END_SRC

#+RESULTS:
: 15

**** Some Python
**** Python requires explicit return statements

#+BEGIN_SRC python
return 5 * 3
#+END_SRC

#+RESULTS:
: 15

** Blocks have tons of parameters, 

*** :dir (a header parameter)
**** the dir parameter specifies where the code volock executes!
**** code blocks can have zero or more header parameters

#+BEGIN_SRC sh :dir /etc
ls
#+END_SRC

**** Tramp, lets you do remote execution with :dir
**** check it out!
**** you can run shell comands on a remote server

*** parameter setting locations
**** see repo!
**** if you have too many parameters, you can specify them above the line
**** you can place all parameters for all blocks for a section in a property drawer
**** language specific default values
***** note some parameters can only be set with header-args
**** you can set default props for an entire file
***** note no colon before args
*** Header Parameter Types
**** :results
***** :results output grabs stdout
***** default for all languages is value, not output (except sh which defaults to output)
***** also, output formatting like lists
#+BEGIN_SRC ruby :results list
Dir.entries('.').sort.select do |file|
  file[0] != '.'
end
#+END_SRC

#+RESULTS:
- action.org
- meetup.org
- node_modules
- notes.org
- npm-debug.log
- package.json
- 
***** raw output
**** :session
***** each block restarts its interpreter
***** but you can keep a repl open, allowing you to continue using previously defined vars in prior code-blocks
#+BEGIN_SRC ruby :session foobar :results value
avar = 42
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ruby :session foobar :results value
avar / 2
#+END_SRC

#+RESULTS:

***** That (above) should have worked, I've got something going on with ob-ruby or inf-ruby (a package I just installed)
**** :file
***** writing output to a file
***** creates a link, to the file, so you can edit the file directly!
**** :exports
***** export code, results, both or neither
***** for rendering to HTML
****** see HTMLize library, to pretty print HTML output
**** :post
***** takes output from block and send it as inout to another block
***** could be another language block!
**** :tangle
***** takes all blocks of the same language, and writes into source file
**** :shebang
***** lets you tangle out comments into source file
**** :noweb
***** knuth's noweb style links
***** marginally useful...
*** variables
**** put them in headers
**** couldn't get python to work
**** setting static variables isn't that useful, but we can use variables from other blocks as input
*** tables
**** lets you run code into tables, then pull it out intoto other code blocks
#+NAME: cool-numbers
#+BEGIN_SRC python 
from random import randint
return [[i,    randint(1, 10),
         i ** 2, randint(1, 100),
         i ** 3, randint(1, 1000)] for i in range (1, 11)]
#+END_SRC

#+RESULTS: cool-numbers
|  1 | 9 |   1 | 81 |    1 | 419 |
|  2 | 3 |   4 | 35 |    8 |  50 |
|  3 | 7 |   9 | 77 |   27 | 324 |
|  4 | 5 |  16 | 44 |   64 | 901 |
|  5 | 8 |  25 | 15 |  125 | 991 |
|  6 | 1 |  36 | 59 |  216 | 984 |
|  7 | 5 |  49 | 25 |  343 | 677 |
|  8 | 5 |  64 | 16 |  512 | 392 |
|  9 | 9 |  81 | 41 |  729 | 849 |
| 10 | 6 | 100 | 60 | 1000 | 299 |

#+BEGIN_SRC python :var nums=cool-numbers :results list
return [cell +1 for row in nums for cell in row ]
#+END_SRC

#+RESULTS:
- 2
- 7
- 2
- 13
- 2
- 147
- 3
- 4
- 5
- 75
- 9
- 306
- 4
- 6
- 10
- 16
- 28
- 155
- 5
- 5
- 17
- 18
- 65
- 364
- 6
- 9
- 26
- 33
- 126
- 56
- 7
- 6
- 37
- 45
- 217
- 493
- 8
- 4
- 50
- 64
- 344
- 752
- 9
- 6
- 65
- 48
- 513
- 778
- 10
- 7
- 82
- 35
- 730
- 225
- 11
- 8
- 101
- 19
- 1001
- 269

#+BEGIN_SRC ruby :var fifth=cool-numbers[4]
fifth
#+END_SRC

#+RESULTS:
| 5 | 8 | 25 | 8 | 125 | 761 |

**** the above was really cool
**** see reprocessing in repo
** Keeping blocks clean
*** :prologue
**** runs before executing
**** but you don't see it on execution
*** using RVM (virtual machine)
** misc features
*** calling blocks with different parameters
*** embedded results
*** 
